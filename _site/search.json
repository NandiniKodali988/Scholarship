[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Conflict And Compassion",
    "section": "",
    "text": "Nandini Kodali"
  },
  {
    "objectID": "index.html#a-global-view-of-threats-to-aid-workers",
    "href": "index.html#a-global-view-of-threats-to-aid-workers",
    "title": "Conflict And Compassion",
    "section": "A Global View of Threats to Aid Workers",
    "text": "A Global View of Threats to Aid Workers\nIn crisis zones around the world — from natural disasters to active conflicts — humanitarian workers serve on the front lines of aid delivery. But increasingly, they are also on the front lines of danger.\nWhat were once isolated events have gradually turned into more widespread patterns of violence. From Africa to the Middle East and South Asia, incidents involving aid workers have emerged across a growing number of countries. These events are not random — they reflect complex dynamics on the ground, influenced by political, social, and security factors.\nThis global overview offers a starting point. In the sections that follow, we’ll take a closer look at where and how these incidents have unfolded over the years, which groups have been affected the most, and how the nature of these threats has evolved."
  },
  {
    "objectID": "index.html#escalating-danger-aid-worker-attacks-since-1997",
    "href": "index.html#escalating-danger-aid-worker-attacks-since-1997",
    "title": "Conflict And Compassion",
    "section": "Escalating Danger: Aid Worker Attacks Since 1997",
    "text": "Escalating Danger: Aid Worker Attacks Since 1997\nThis line chart shows how the total number of aid workers affected — including those killed, wounded, or kidnapped — has changed year over year. This timeline reveals a clear trend: attacks on humanitarian workers have surged over the past two decades. From just over 50 reported incidents in the late 1990s, the numbers have climbed dramatically, peaking above 400 in multiple recent years.\n\n\nSpikes in the data often correlate with major geopolitical crises — such as the wars in Afghanistan, the rise of conflict in South Sudan and Syria, and more recently, the escalation of violence in the Occupied Palestinian Territories.\nThe general trend points to an important shift: operating in conflict zones has become steadily more challenging for humanitarian workers.\nExplore Regional Insights\n\n\n\n\n  Africa\n  Asia\n  Europe\n  Middle East\n  South America\n\n\n\n\n\n\n\n\n  \n    \n\n      \n      \n        \n      \n\n      \n        \n        \n\n        \n        \n          From the early 2000s through the present, incidents have steadily increased — often peaking during civil conflicts and post-election violence in countries like South Sudan, Somalia, and the DR Congo.\n          \n          Notably, the rise post-2017 coincides with complex, multi-actor conflicts, often involving non-state armed groups operating in unstable political environments. These spikes aren’t isolated; they reflect a persistent pattern of risk for humanitarian workers across the continent.\n\n        \n      \n    \n  \n\n\n\n\n\n\n  \n    \n\n      \n      \n        \n      \n\n      \n        \n        \n\n        \n        \n           Asia’s trajectory reveals a series of sharp increases and dips, with a notable peak in 2013. This spike reflects some of the deadliest periods for aid workers — particularly in countries like Afghanistan and Pakistan, where insecurity and targeted violence were widespread.\n\n          Although the numbers have gradually declined since that high point, they continue to remain elevated relative to earlier years. This ongoing trend indicates that operational risks remain significant in the region, particularly in areas affected by conflict, political instability, or limited state presence.\n        \n      \n    \n  \n\n\n\n\n\n  \n    \n\n      \n      \n        \n      \n\n      \n        \n        \n\n        \n        \n          Europe’s trendline tells a story of relatively low impact — until a striking surge in 2022.\n\n          This sudden spike reflects the repercussions of the war in Ukraine, where the humanitarian landscape rapidly deteriorated. Conflict zones that were once rare in Europe reemerged, and aid operations became increasingly hazardous.\n        \n      \n    \n  \n\n\n\n\n\n  \n    \n\n      \n      \n        \n      \n\n      \n        \n        \n\n        \n        \n          The Middle East’s trajectory remained relatively low and stable for nearly two decades — until a surge beginning in 2022.\n\n          This jump mirrors the escalation of armed conflicts in the region, particularly in areas already affected by longstanding humanitarian emergencies. Aid workers in countries such as Syria, Yemen, and Palestine have increasingly found themselves on the frontlines — not just of aid, but of violence itself.\n        \n      \n    \n  \n\n\n\n\n\n  \n    \n\n      \n      \n        \n      \n\n      \n        \n        \n\n        \n        \n          South America has seen relatively fewer aid worker attacks compared to more conflict-prone regions, but the risk is far from zero.\n\n          The spikes in 2003 and especially in 2020 reflect moments where aid operations intersected with local unrest or organized violence. These incidents, while infrequent, can still have a chilling effect on humanitarian access in vulnerable communities."
  },
  {
    "objectID": "index.html#changing-risk-exposure-who-gets-targeted",
    "href": "index.html#changing-risk-exposure-who-gets-targeted",
    "title": "Conflict And Compassion",
    "section": "Changing Risk Exposure: Who Gets Targeted?",
    "text": "Changing Risk Exposure: Who Gets Targeted?\nThis bump chart reveals how the burden of violence has shifted across different types of humanitarian agencies from, ranked by their — including those killed, wounded, or kidnapped.\n\n\nInternational NGOs (INGOs) consistently top the chart with 3,497 affected workers, reflecting their widespread presence in high-risk areas. National NGOs (NNGOs) follow with 2,055 affected, often operating in frontline roles with limited protection.\nUN agencies, though heavily resourced and coordinated, are not immune: 1,775 workers have been impacted, especially in post-2000 conflicts like Iraq and Afghanistan, where they were seen as representatives of international political agendas.\nThe Red Cross movement (split into NRCS and IFRC – 521 and ICRC – 204) generally operates under a protection mandate and neutral stance. Their lower totals may reflect more secure access or different operational strategies, but they remain at risk, particularly in civil war zones.\nFinally, ‘Other’ organizations, including faith-based or smaller civil society groups, account for 105 affected workers — a lower figure, but still significant in the context of under-reported violence in some regions.\nThe data reveals how visibility, operational scope, and perceived affiliations influence risk. The stark gap between INGOs and others isn’t just about size — it reflects how different organizations are positioned in the geopolitical landscape of humanitarian aid."
  },
  {
    "objectID": "index.html#who-is-behind-the-violence",
    "href": "index.html#who-is-behind-the-violence",
    "title": "Conflict And Compassion",
    "section": "Who is Behind the Violence?",
    "text": "Who is Behind the Violence?\nUnderstanding the actors behind attacks on aid workers is crucial to navigating humanitarian access and security.\n\n\nNearly 48.3% of incidents involve unknown actors, reflecting the chaotic conditions of collapsed states or areas where reporting and accountability are weak.\nNon-State Armed Groups are behind 30.9% of attacks — often in places like Afghanistan, Somalia, Syria, and DR Congo. Their motivations range from political opposition to territorial control, viewing aid as interference or leverage.\nState Actors are responsible for 13% of incidents, often during military operations or in politically sensitive contexts like Gaza and Myanmar.\nIndividual perpetrators (5.5%) and criminal groups (2.3%) contribute to more opportunistic violence, especially in urban zones or insecure transit corridors.\nThese patterns highlight the need for tailored security strategies, grounded in local political understanding and real-time threat assessments."
  },
  {
    "objectID": "index.html#how-attack-tactics-vary-by-perpetrator",
    "href": "index.html#how-attack-tactics-vary-by-perpetrator",
    "title": "Conflict And Compassion",
    "section": "How Attack Tactics Vary by Perpetrator",
    "text": "How Attack Tactics Vary by Perpetrator\nDifferent types of attackers tend to use different methods. This section explores how attack contexts — such as ambushes, raids, or detentions — vary depending on the actor group involved. Understanding these patterns helps tailor security strategies to specific threats on the ground.\n\nSelect Actor Group:  Non-state Armed Group State Actor Criminal Individual Unknown \n\n\n\n\n\n\n\n\nNon-state armed groups account for approximately 31% of all recorded attacks. Nearly 48%of these are ambushes (474), followed by raids (175) and detentions (104). These patterns suggest highly coordinated, disruptive intent — often observed in areas with insurgent activity like South Sudan, Somalia, or Syria. Agencies working in such zones should emphasize unpredictable routing, real-time communication protocols, and preemptive negotiations with neutral local stakeholders."
  },
  {
    "objectID": "index.html#what-risks-do-different-agencies-face",
    "href": "index.html#what-risks-do-different-agencies-face",
    "title": "Conflict And Compassion",
    "section": "What Risks Do Different Agencies Face?",
    "text": "What Risks Do Different Agencies Face?\n\n\nThis heatmap highlights how different humanitarian agency types experience distinct patterns of violence. INGOs stand out as the most frequently targeted, particularly in ambushes and individual attacks, likely due to their broad field presence and frequent travel in high-risk regions."
  },
  {
    "objectID": "index.html#where-aid-work-is-most-dangerous",
    "href": "index.html#where-aid-work-is-most-dangerous",
    "title": "Conflict And Compassion",
    "section": "Where Aid Work Is Most Dangerous",
    "text": "Where Aid Work Is Most Dangerous\n\n\nThis chart shows the seven countries with the highest number of aid workers affected since 1997 — a reflection of long-running conflicts and operational challenges.\nAfghanistan leads, with over 1,350 incidents, driven by insurgent activity, political instability, and targeted attacks. South Sudan and Sudan follow, where aid access is often contested amid civil war and intercommunal violence.\nSyria, Somalia, and Palestine face continued risks tied to armed groups, military operations, and urban warfare. In the DR Congo, overlapping militia activity and weak infrastructure heighten exposure."
  },
  {
    "objectID": "index.html#field-level-realities-the-7-most-affected-countries",
    "href": "index.html#field-level-realities-the-7-most-affected-countries",
    "title": "Conflict And Compassion",
    "section": "Field-Level Realities: The 7 Most Affected Countries",
    "text": "Field-Level Realities: The 7 Most Affected Countries\n\nScroll horizontally to explore aid worker attack patterns across the 7 most affected countries.\n\n\n\n\n  \n  \n    Afghanistan\n    \n    \n      Afghanistan's threat landscape reveals a deeply entrenched pattern of targeted violence. The Sankey diagram shows that the majority of incidents originate from Non-State Armed Groups and Unknown actors, with ambushes and individual attacks being the most common contexts. These tactics, long associated with insurgent groups like the Taliban, reflect the strategic targeting of humanitarian workers in contested zones.\n    \n    \n      The most affected agency groups are INGOs (45.4%), followed by NNGOs (32.8%). Their operational footprint, particularly in remote or volatile areas, increases exposure.\n    \n  \n\n  \n  \n    South Sudan\n    \n    \n      In South Sudan, attacks on aid workers are primarily driven by Unknown actors and Non-State Armed Groups, contributing heavily to ambushes, raids, and individual attacks. This reflects the region’s protracted civil conflict, where shifting allegiances and fragmented militias create a chaotic operating environment.\n    \n    \n      INGOs (50%), NNGOs (24.9%), and the UN (23.9%) face the greatest risk, reinforcing the need for mobility security and hyper-local engagement protocols.\n    \n  \n\n  \n  \n    Sudan\n    \n    \n      In Sudan, the majority of attacks are carried out by Unknown actors, with ambushes being the most common context. Non-State Armed Groups also play a significant role, engaging in raids and individual attacks. These patterns reflect the complexity of overlapping militia and rebel activity.\n    \n    \n      INGOs (49.9%) and UN agencies (25.4%) are most targeted, emphasizing the need for high-visibility protocol adjustments and greater situational awareness during rural deployments.\n    \n  \n\n  \n  \n    Syria\n    \n    \n      In Syria, State Actors dominate the attack landscape, particularly through combat and crossfire scenarios. These reflect the blurred lines between humanitarian work and militarized zones in Syria’s civil conflict.\n    \n    \n      NNGOs (53.4%) and INGOs (22.4%) are most affected, suggesting strong local engagement in high-risk areas. Security protocols here must balance political neutrality with real-time intelligence sharing.\n    \n  \n\n  \n  \n    Somalia\n    \n    \n      Somalia’s Sankey diagram highlights a threat landscape shaped by Unknown actors and Non-State Armed Groups, especially via ambushes and individual attacks. These patterns reflect the persistent instability posed by armed factions like Al-Shabaab.\n    \n    \n      INGOs (34.7%) and UN agencies (30.2%) are the most affected, reinforcing the risks faced by internationally affiliated personnel during rural outreach or mobile missions.\n    \n  \n\n  \n  \n    Occupied Palestinian Territories\n    \n    \n      In Palestine, the primary attack context is combat or crossfire, predominantly involving State Actors. This is consistent with the high-tension environments in Gaza and the West Bank, where operations overlap with active security zones.\n    \n    \n      The UN (63.9%) accounts for the largest share of affected workers, followed by NRCS and IFRC affiliates (15.7%). Mitigation strategies should focus on coordination with both local authorities and community leaders.\n    \n  \n\n  \n  \n    DR Congo\n    \n    \n      DR Congo’s Sankey plot is marked by frequent ambushes and raids, largely executed by Non-State Armed Groups and Unknown actors. These tactics reflect the fragmented nature of militias and their targeting of humanitarian mobility routes.\n    \n    \n      The impact is most severe on INGOs (58%) and NNGOs (16.5%), suggesting the need for convoy protocols and field team extraction readiness."
  },
  {
    "objectID": "index.html#conclusions",
    "href": "index.html#conclusions",
    "title": "Conflict And Compassion",
    "section": "Conclusions",
    "text": "Conclusions\nViolence against humanitarian workers has increased notably since the early 2000s, with spikes aligning with major conflicts in Afghanistan, Syria, and South Sudan. The majority of known attacks are attributed to Non-State Armed Groups, primarily through ambushes, raids, and individual attacks in high-risk zones.\nINGOs bear the highest overall burden (3,497 affected), while NNGOs face heightened risks in countries like Syria (53.4%) and Afghanistan (32.8%), often without adequate security infrastructure.\nThreat patterns vary by region — State Actors are dominant in Palestine and Syria, while NSAGs lead in Somalia, Sudan, and DR Congo. This variation underscores the need for tailored, context-specific security strategies, rather than a uniform approach."
  },
  {
    "objectID": "index.html#recommendations",
    "href": "index.html#recommendations",
    "title": "Conflict And Compassion",
    "section": "Recommendations",
    "text": "Recommendations\nPrioritize Movement Security in Ambush-Prone Zones\nAmbushes are the most frequent attack context (over 1,400 incidents). In South Sudan and DR Congo, where INGO exposure exceeds 50%, aid agencies should adopt GPS tracking, unpredictable routes, and pre-mission risk scans to reduce vulnerability during field operations.\nInvest in Security Infrastructure for National NGOs\nNNGOs represent 32.8% of affected workers in Afghanistan and 53.4% in Syria — yet often lack formal security support. Donors should fund field assessments, evacuation planning, and alert systems, and involve local staff in security planning to promote sustainable, context-specific protection.\nEngage Proactively with State Actors in High-Conflict Areas\nIn Palestine, 63.9% of affected aid workers are from UN agencies, often caught in state-led combat. Similar patterns are seen in Syria. Agencies should maintain liaison channels with military actors and adapt visibility protocols based on local tensions.\nCustomize Risk Mitigation Based on Conflict Dynamics and Agency Exposure\nINGOs, with 3,497 affected staff, face the highest risk globally. But context matters: in NSAG-dominated areas (e.g., South Sudan), discreet movement and community engagement are essential. In state-heavy environments (e.g., Syria, Palestine), legal coordination and deconfliction protocols are critical. Tailored strategies must reflect both threat dynamics and agency type to ensure effective and safe operations."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Conflict And Compassion",
    "section": "References",
    "text": "References\n\n\nAid Worker Security Database. 2024. “About the Aid Worker Security Database.” https://www.aidworkersecurity.org/about.\n\n\nBBC News. 2018. “Somalia Profile - Timeline.” https://www.bbc.com/news/world-africa-14094632.\n\n\nConcern Worldwide. 2022. “Timeline: South Sudan’s History at a Glance.” https://concernusa.org/news/timeline-south-sudan-history/.\n\n\nCouncil on Foreign Relations. n.d. “Timeline: The Iraq War.” https://www.cfr.org/timeline/iraq-war.\n\n\n———. 2021. “The u.s. War in Afghanistan.” https://www.cfr.org/timeline/us-war-afghanistan.\n\n\nGeorge W. Bush Presidential Library. n.d. “The Iraq War.” https://www.georgewbushlibrary.gov/research/topic-guides/the-iraq-war.\n\n\nMoulton, Madison. 2021. “Africa’s World War: The Congo War.” https://historyguild.org/africas-world-war-the-congo-war/.\n\n\nNorwegian Refugee Council. 2015. “10 Challenges to Humanitarian Action.” https://www.nrc.no/perspectives/2015/nr-3/10-challanges.\n\n\nODI. 2010. Good Practice Review: Operational Security Management in Violent Environments. London: Humanitarian Practice Network."
  },
  {
    "objectID": "index.html#code",
    "href": "index.html#code",
    "title": "Conflict And Compassion",
    "section": "Code",
    "text": "Code\nThe GitHub Repository for this project can be found here"
  },
  {
    "objectID": "code/map_r.html",
    "href": "code/map_r.html",
    "title": "Conflict and Compassion",
    "section": "",
    "text": "library(ggplot2)\nlibrary(gganimate)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(gifski)\nlibrary(IRdisplay)\n\nWarning message:\n\"package 'gifski' was built under R version 4.4.1\"\n\n\n\nsecurity_incidents_clean &lt;- read.csv(\"../data/processed/security_incidents_clean.csv\")\n\n\nhead(security_incidents_clean)\n\n\nA data.frame: 6 x 39\n\n\n\nIncident.ID\nYear\nMonth\nCountry.Code\nCountry\nRegion\nDistrict\nCity\nUN\nINGO\n...\nMeans.of.attack\nAttack.context\nLocation\nMotive\nActor.type\nActor.name\nDetails\nVerified\nSource\nGroup\n\n\n\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n...\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\n1\n1997\n1\nKH\nCambodia\nBanteay Meanchey\nUnknown\nUnknown\n0\n0\n...\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in Banteay Meanchey province.\nArchived\nArchived\nAsia\n\n\n2\n2\n1997\n1\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n4\n...\nShooting\nRaid\nOffice/compound\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1 INGO international (US) staff gravely wounded during armed raid on INGO compound in Ruhengeri, Rwanda.\nArchived\nArchived\nAfrica\n\n\n3\n3\n1997\n2\nTJ\nTajikistan\nUnknown\nUnknown\nUnknown\n4\n0\n...\nKidnapping\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Nigerian) staff, 1 ICRC international staff and 1 ICRC national staff kidnapped along with other (not included) UN staff, journalist and Tajik govt rep; released 48 hours later.\nArchived\nArchived\nAsia\n\n\n4\n4\n1997\n2\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n1\n...\nUnknown\nUnknown\nUnknown\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittihad militia in Kismayo.\nArchived\nArchived\nAfrica\n\n\n5\n5\n1997\n2\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n0\n...\nShooting\nIndividual attack\nUnknown\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali Feb 14.\nArchived\nArchived\nAfrica\n\n\n6\n7\n1997\n5\nCD\nDR Congo\nUnknown\nUnknown\nUnknown\n0\n0\n...\nUnknown\nCombat/Crossfire\nUnknown\nIncidental\nNon-state armed group: National\nAlliance of Democratic Forces for the Liberation of Congo-Zaire (ADFL)\n10 NRCS staff first aid workers killed in fighting between Zairean troops and rebels from the Alliance of Democratic Forces for the Liberation of Congo-Zaire (ADFL).\nArchived\nArchived\nAfrica\n\n\n\n\n\n\ncolnames(security_incidents_clean)\n\n\n'Incident.ID''Year''Month''Country.Code''Country''Region''District''City''UN''INGO''ICRC''NRCS.and.IFRC''NNGO''Other''Nationals.killed''Nationals.wounded''Nationals.kidnapped''Total.nationals''Internationals.killed''Internationals.wounded''Internationals.kidnapped''Total.internationals''Total.killed''Total.wounded''Total.kidnapped''Total.affected''Gender.Male''Gender.Female''Gender.Unknown''Means.of.attack''Attack.context''Location''Motive''Actor.type''Actor.name''Details''Verified''Source''Group'\n\n\n\n# Group by Country and Year, sum Total.affected\ncountry_year_data &lt;- security_incidents_clean |&gt;\n  group_by(Country, Year) |&gt;\n  summarise(TotalAffected = sum(Total.affected, na.rm = TRUE), .groups = \"drop\") |&gt;\n  filter(!is.na(TotalAffected) & TotalAffected &gt; 0)\n\n\n# Load world shapefile\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Join your summarized data with map data\nworld_data &lt;- left_join(world, country_year_data, by = c(\"name\" = \"Country\"))\n\n\np &lt;- ggplot(world_data) +\n  geom_sf(fill = \"gray90\", color = \"white\") +\n  geom_sf(aes(size = TotalAffected), color = \"red\", alpha = 0.6) +\n  scale_size_continuous(range = c(1, 20), breaks = c(10, 50, 100, 200)) +\n  labs(\n    title = 'Year: {closest_state}',\n    size = 'Total Affected'\n  ) +\n  theme_minimal() +\n  transition_states(Year, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n\n\n\n\nReferences\n\nAid Worker Security Database. 2024. “About the Aid Worker Security Database.” https://www.aidworkersecurity.org/about.\n\n\nBBC News. 2018. “Somalia Profile - Timeline.” https://www.bbc.com/news/world-africa-14094632.\n\n\nConcern Worldwide. 2022. “Timeline: South Sudan’s History at a Glance.” https://concernusa.org/news/timeline-south-sudan-history/.\n\n\nCouncil on Foreign Relations. n.d. “Timeline: The Iraq War.” https://www.cfr.org/timeline/iraq-war.\n\n\n———. 2021. “The u.s. War in Afghanistan.” https://www.cfr.org/timeline/us-war-afghanistan.\n\n\nGeorge W. Bush Presidential Library. n.d. “The Iraq War.” https://www.georgewbushlibrary.gov/research/topic-guides/the-iraq-war.\n\n\nMoulton, Madison. 2021. “Africa’s World War: The Congo War.” https://historyguild.org/africas-world-war-the-congo-war/.\n\n\nNorwegian Refugee Council. 2015. “10 Challenges to Humanitarian Action.” https://www.nrc.no/perspectives/2015/nr-3/10-challanges.\n\n\nODI. 2010. Good Practice Review: Operational Security Management in Violent Environments. London: Humanitarian Practice Network."
  },
  {
    "objectID": "code/eda.html",
    "href": "code/eda.html",
    "title": "Conflict and Compassion",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndf = pd.read_csv(\"../data/processed/security_incidents_clean.csv\")\n\n\nimport matplotlib.pyplot as plt\n\n# Group by year and sum total affected\nyearly_totals = df.groupby('Year')['Total affected'].sum().reset_index()\n\n# Line plot\nplt.figure(figsize=(10, 5))\nplt.plot(yearly_totals['Year'], yearly_totals['Total affected'], marker='o')\nplt.title('Total Aid Workers Affected Over Time')\nplt.xlabel('Year')\nplt.ylabel('Total Affected')\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Group by Year and Country, summing the total affected\ngrouped = df.groupby(['Year', 'Country'])['Total affected'].sum().reset_index()\n\n# Sort within each year and get top 3 countries\ntop3_per_year = grouped.sort_values(['Year', 'Total affected'], ascending=[True, False]) \\\n                       .groupby('Year').head(3)\n\n# Create list of tuples (Country, Total Affected) for each year\ntop3_list = top3_per_year.groupby('Year').apply(\n    lambda x: list(zip(x['Country'], x['Total affected']))\n).reset_index(name='Top 3 Countries with Counts')\n\n# Display result\ntop3_list\n\n\n\n\n\n\n\n\nYear\nTop 3 Countries with Counts\n\n\n\n\n0\n1997\n[(Chechnya, 15), (Somalia, 15), (DR Congo, 10)]\n\n\n1\n1998\n[(Somalia, 18), (Kosovo, 7), (Sudan, 7)]\n\n\n2\n1999\n[(Angola, 13), (Somalia, 10), (Sudan, 9)]\n\n\n3\n2000\n[(Somalia, 16), (Sudan, 15), (Indonesia, 10)]\n\n\n4\n2001\n[(Somalia, 19), (Burundi, 15), (Tajikistan, 15)]\n\n\n5\n2002\n[(Angola, 14), (Chechnya, 11), (Occupied Pales...\n\n\n6\n2003\n[(Iraq, 49), (Afghanistan, 22), (Sudan, 11)]\n\n\n7\n2004\n[(Afghanistan, 40), (Iraq, 32), (Sudan, 23)]\n\n\n8\n2005\n[(Sudan, 73), (Afghanistan, 35), (Somalia, 12)]\n\n\n9\n2006\n[(Sudan, 87), (Afghanistan, 55), (Sri Lanka, 25)]\n\n\n10\n2007\n[(Afghanistan, 48), (Sudan, 37), (Sri Lanka, 25)]\n\n\n11\n2008\n[(Somalia, 86), (Afghanistan, 63), (Sudan, 42)]\n\n\n12\n2009\n[(Afghanistan, 62), (Pakistan, 40), (Sudan, 35)]\n\n\n13\n2010\n[(Afghanistan, 120), (Pakistan, 29), (Sudan, 20)]\n\n\n14\n2011\n[(Afghanistan, 92), (Nigeria, 46), (Pakistan, ...\n\n\n15\n2012\n[(Afghanistan, 105), (Somalia, 32), (Pakistan,...\n\n\n16\n2013\n[(Afghanistan, 167), (Syrian Arab Republic, 70...\n\n\n17\n2014\n[(Afghanistan, 127), (Syrian Arab Republic, 45...\n\n\n18\n2015\n[(Afghanistan, 101), (South Sudan, 42), (DR Co...\n\n\n19\n2016\n[(South Sudan, 98), (Afghanistan, 63), (Syrian...\n\n\n20\n2017\n[(South Sudan, 79), (Syrian Arab Republic, 53)...\n\n\n21\n2018\n[(South Sudan, 111), (Syrian Arab Republic, 68...\n\n\n22\n2019\n[(Syrian Arab Republic, 86), (South Sudan, 62)...\n\n\n23\n2020\n[(Syrian Arab Republic, 85), (South Sudan, 76)...\n\n\n24\n2021\n[(South Sudan, 93), (Afghanistan, 61), (Syrian...\n\n\n25\n2022\n[(South Sudan, 62), (Ukraine, 61), (Mali, 39)]\n\n\n26\n2023\n[(Occupied Palestinian Territories, 214), (Sou...\n\n\n27\n2024\n[(Occupied Palestinian Territories, 265), (Sud...\n\n\n28\n2025\n[(Occupied Palestinian Territories, 20), (Suda...\n\n\n\n\n\n\n\n\ntop3_list.to_csv(\"test.csv\", index=False)\n\n\n!pip install pycountry-convert\n\nCollecting pycountry-convert\n  Downloading pycountry_convert-0.7.2-py3-none-any.whl (13 kB)\nCollecting pytest-mock&gt;=1.6.3\n  Downloading pytest_mock-3.14.0-py3-none-any.whl (9.9 kB)\nCollecting pprintpp&gt;=0.3.0\n  Downloading pprintpp-0.4.0-py2.py3-none-any.whl (16 kB)\nRequirement already satisfied: wheel&gt;=0.30.0 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from pycountry-convert) (0.38.4)\nCollecting repoze.lru&gt;=0.7\n  Downloading repoze.lru-0.7-py3-none-any.whl (10 kB)\nCollecting pytest-cov&gt;=2.5.1\n  Downloading pytest_cov-6.1.1-py3-none-any.whl (23 kB)\nCollecting pytest&gt;=3.4.0\n  Downloading pytest-8.3.5-py3-none-any.whl (343 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 343.6/343.6 kB 3.7 MB/s eta 0:00:00a 0:00:01\nCollecting pycountry&gt;=16.11.27.1\n  Downloading pycountry-24.6.1-py3-none-any.whl (6.3 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.3/6.3 MB 9.1 MB/s eta 0:00:0000:0100:01\nCollecting iniconfig\n  Downloading iniconfig-2.1.0-py3-none-any.whl (6.0 kB)\nCollecting pluggy&lt;2,&gt;=1.5\n  Downloading pluggy-1.5.0-py3-none-any.whl (20 kB)\nCollecting tomli&gt;=1\n  Using cached tomli-2.2.1-py3-none-any.whl (14 kB)\nRequirement already satisfied: exceptiongroup&gt;=1.0.0rc8 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from pytest&gt;=3.4.0-&gt;pycountry-convert) (1.2.2)\nRequirement already satisfied: packaging in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from pytest&gt;=3.4.0-&gt;pycountry-convert) (22.0)\nCollecting coverage[toml]&gt;=7.5\n  Downloading coverage-7.8.0-cp310-cp310-macosx_11_0_arm64.whl (211 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 211.8/211.8 kB 14.4 MB/s eta 0:00:00\nInstalling collected packages: repoze.lru, pprintpp, tomli, pycountry, pluggy, iniconfig, coverage, pytest, pytest-mock, pytest-cov, pycountry-convert\n  Attempting uninstall: pluggy\n    Found existing installation: pluggy 1.0.0\n    Uninstalling pluggy-1.0.0:\n      Successfully uninstalled pluggy-1.0.0\nSuccessfully installed coverage-7.8.0 iniconfig-2.1.0 pluggy-1.5.0 pprintpp-0.4.0 pycountry-24.6.1 pycountry-convert-0.7.2 pytest-8.3.5 pytest-cov-6.1.1 pytest-mock-3.14.0 repoze.lru-0.7 tomli-2.2.1\n\n\n\nimport pycountry_convert as pc\n\ndef get_continent(country_name):\n    try:\n        country_code = pc.country_name_to_country_alpha2(country_name)\n        continent_code = pc.country_alpha2_to_continent_code(country_code)\n        return pc.convert_continent_code_to_continent_name(continent_code)\n    except:\n        return 'Unknown'\n\n# Apply function to create 'Grou' column\ndf['Group'] = df['Country'].apply(get_continent)\n\n\ndf.head()\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\nINGO\n...\nMeans of attack\nAttack context\nLocation\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\nGroup\n\n\n\n\n0\n1\n1997\n1\nKH\nCambodia\nBanteay Meanchey\nUnknown\nUnknown\n0\n0\n...\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\nAsia\n\n\n1\n2\n1997\n1\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n4\n...\nShooting\nRaid\nOffice/compound\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\nAfrica\n\n\n2\n3\n1997\n2\nTJ\nTajikistan\nUnknown\nUnknown\nUnknown\n4\n0\n...\nKidnapping\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Niger...\nArchived\nArchived\nAsia\n\n\n3\n4\n1997\n2\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n1\n...\nUnknown\nUnknown\nUnknown\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittiha...\nArchived\nArchived\nAfrica\n\n\n4\n5\n1997\n2\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n0\n...\nShooting\nIndividual attack\nUnknown\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\nAfrica\n\n\n\n\n5 rows × 39 columns\n\n\n\n\ndf['Group'].unique()\n\narray(['Asia', 'Africa', 'Unknown', 'South America', 'Oceania',\n       'North America', 'Europe'], dtype=object)\n\n\n\n# Filter rows where region group is 'Unknown'\nunknown_group_rows = df[df['Group'] == 'Unknown']\n\n# Display the result\nprint(unknown_group_rows)\n\n      Incident ID  Year  Month Country Code                           Country  \\\n5               7  1997      5           CD                          DR Congo   \n14             16  1997      7      Unknown                          Chechnya   \n15             17  1997      7      Unknown                          Chechnya   \n16             18  1997      7      Unknown                          Chechnya   \n20             21  1997      8      Unknown                          Chechnya   \n...           ...   ...    ...          ...                               ...   \n4301         4447  2025      1           PS  Occupied Palestinian Territories   \n4303         4473  2025      1           CD                          DR Congo   \n4310         4467  2025      2           CD                          DR Congo   \n4312         4482  2025      2           PS  Occupied Palestinian Territories   \n4320         4480  2025      2           CD                          DR Congo   \n\n          Region     District                              City  UN  INGO  \\\n5        Unknown      Unknown                           Unknown   0     0   \n14       Unknown      Unknown                           Unknown   0     1   \n15       Unknown      Unknown                           Unknown   0     2   \n16    Ingushetia  Nazranovsky                            Nazran   0     1   \n20      Dagestan      Unknown                           Unknown   0     4   \n...          ...          ...                               ...  ..   ...   \n4301  Gaza Strip         Gaza                       Khan Younis   0     0   \n4303  North Kivu       Masisi  Masisi General Referral Hospital   0     0   \n4310  North Kivu     Rutshuru                     Kabirangiriro   0     3   \n4312   West Bank       Nablus                             Beita   0     0   \n4320  North Kivu       Masisi                            Masisi   0     1   \n\n      ...   Means of attack     Attack context         Location      Motive  \\\n5     ...           Unknown   Combat/Crossfire          Unknown  Incidental   \n14    ...           Unknown  Individual attack             Home     Unknown   \n15    ...        Kidnapping            Unknown          Unknown   Political   \n16    ...        Kidnapping            Unknown          Unknown   Political   \n20    ...        Kidnapping            Unknown          Unknown   Political   \n...   ...               ...                ...              ...         ...   \n4301  ...           Unknown   Combat/Crossfire             Road     Unknown   \n4303  ...          Shelling   Combat/Crossfire     Project site     Unknown   \n4310  ...           Unknown            Unknown          Unknown     Unknown   \n4312  ...  Other Explosives            Unknown             Road    Disputed   \n4320  ...          Shooting   Combat/Crossfire  Office/compound  Incidental   \n\n                              Actor type  \\\n5        Non-state armed group: National   \n14                               Unknown   \n15                               Unknown   \n16                               Unknown   \n20                               Unknown   \n...                                  ...   \n4301         Foreign or coalition forces   \n4303  Non-state armed group: Subnational   \n4310  Non-state armed group: Subnational   \n4312         Foreign or coalition forces   \n4320  Non-state armed group: Subnational   \n\n                                             Actor name  \\\n5     Alliance of Democratic Forces for the Liberati...   \n14                                              Unknown   \n15                                              Unknown   \n16                                              Unknown   \n20                                              Unknown   \n...                                                 ...   \n4301                        Israel Defense Forces (IDF)   \n4303                            March 23 Movement (M23)   \n4310                            March 23 Movement (M23)   \n4312                        Israel Defense Forces (IDF)   \n4320                            March 23 Movement (M23)   \n\n                                                Details  Verified  \\\n5     10 NRCS staff first aid workers killed in figh...  Archived   \n14          1 INGO local staffer killed in home attack.  Archived   \n15    2 INGO international (British) staff kidnapped...  Archived   \n16    1 INGO international staff kidnapped in Nazran...  Archived   \n20    4 INGO international staff (French) kidnapped ...  Archived   \n...                                                 ...       ...   \n4301  One NRCS paramedic was injured when the clearl...   Pending   \n4303  Two NNGO aid workers were injured when M-23 ro...   Pending   \n4310  Three national INGO aid workers were attacked ...   Pending   \n4312  One NRCS paramedic was injured when an ambulan...   Pending   \n4320  One INGO aid worker was shot when bullets from...   Pending   \n\n               Source    Group  \n5            Archived  Unknown  \n14           Archived  Unknown  \n15           Archived  Unknown  \n16           Archived  Unknown  \n20           Archived  Unknown  \n...               ...      ...  \n4301            Media  Unknown  \n4303            ACLED  Unknown  \n4310  Official Report  Unknown  \n4312            Media  Unknown  \n4320  Official Report  Unknown  \n\n[448 rows x 39 columns]\n\n\n\nunknown_countries = unknown_group_rows['Country'].unique()\nprint(unknown_countries)\n\n['DR Congo' 'Chechnya' 'Kosovo' 'Occupied Palestinian Territories'\n 'Kashmir' \"Cote D'Ivoire\" 'Libyan Arab Jamahiriya' 'Western Sahara']\n\n\n\ncustom_region_map = {\n    'DR Congo': 'Africa',\n    'Chechnya': 'Europe',  # Part of Russia (Caucasus region)\n    'Kosovo': 'Europe',\n    'Occupied Palestinian Territories': 'Middle East',\n    'Kashmir': 'Asia',  # Disputed territory between India and Pakistan\n    \"Cote D'Ivoire\": 'Africa',  # Also known as Ivory Coast\n    'Libyan Arab Jamahiriya': 'Africa',  # Former name of Libya\n    'Western Sahara': 'Africa'\n}\n\n\ndf['Group'] = df.apply(\n    lambda row: custom_region_map[row['Country']] if row['Country'] in custom_region_map else row['Group'],\n    axis=1\n)\n\n\ndf['Group'].unique()\n\narray(['Asia', 'Africa', 'Europe', 'South America', 'Oceania',\n       'Middle East', 'North America'], dtype=object)\n\n\n\n# Group by Year and Region (Grou), summing total affected\nregion_year = df.groupby(['Year', 'Group'])['Total affected'].sum().reset_index()\n\n# Get list of unique regions\nregions = region_year['Group'].unique()\n\n# Create a separate plot for each region\nfor region in regions:\n    region_data = region_year[region_year['Group'] == region]\n    \n    plt.figure(figsize=(10, 5))\n    plt.plot(region_data['Year'], region_data['Total affected'], marker='o')\n    plt.title(f'Total Aid Workers Affected Over Time - {region}')\n    plt.xlabel('Year')\n    plt.ylabel('Total Affected')\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.to_csv(\"../data/processed/security_incidents_clean.csv\", index=False)\n\n\n# Group by Year and Region (Grou), summing total affected\nregion_year = df.groupby(['Year', 'Group'])['Total affected'].sum().reset_index()\n\n# Get list of unique regions\nregions = region_year['Group'].unique()\n\n# Create a separate plot for each region\nfor region in regions:\n    region_data = region_year[region_year['Group'] == region]\n    \n    plt.figure(figsize=(10, 5))\n    plt.plot(region_data['Year'], region_data['Total affected'], marker='o')\n    plt.title(f'Total Aid Workers Affected Over Time - {region}')\n    plt.xlabel('Year')\n    plt.ylabel('Total Affected')\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nregions = region_year['Group'].unique()\nregions\n\narray(['Africa', 'Asia', 'Europe', 'South America', 'Oceania',\n       'Middle East', 'North America'], dtype=object)\n\n\n\n!pip install mplcursors\n\nCollecting mplcursors\n  Downloading mplcursors-0.6-py3-none-any.whl (20 kB)\nRequirement already satisfied: matplotlib!=3.7.1,&gt;=3.1 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from mplcursors) (3.9.2)\nRequirement already satisfied: pillow&gt;=8 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (10.3.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (2.8.2)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (4.51.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (1.4.4)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (22.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (0.11.0)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (1.2.0)\nRequirement already satisfied: numpy&gt;=1.23 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (1.24.4)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (3.0.9)\nRequirement already satisfied: six&gt;=1.5 in /Users/nandinikodali/miniforge3/lib/python3.10/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib!=3.7.1,&gt;=3.1-&gt;mplcursors) (1.16.0)\nInstalling collected packages: mplcursors\nSuccessfully installed mplcursors-0.6\n\n\n\nimport matplotlib.pyplot as plt\nimport mplcursors\n\n# Optional: global font settings\nplt.rcParams['font.family'] = 'Courier New'\n\n# Clean Group column\ndf['Group'] = df['Group'].str.strip().str.replace('\\u00A0', ' ', regex=True)\n\n# Group by Year and Group\nregion_year = df.groupby(['Year', 'Group'])['Total affected'].sum().reset_index()\n\n# Get list of unique regions\nregions = region_year['Group'].unique()\n\n# Plot for each region\nfor region in regions:\n    region_data = region_year[region_year['Group'] == region]\n\n    plt.figure(figsize=(10, 5))\n    line, = plt.plot(\n        region_data['Year'], \n        region_data['Total affected'], \n        marker='o', \n        color='red', \n        linewidth=2\n    )\n\n    # Titles and labels\n    plt.title(f'Total Aid Workers Affected Over Time - {region}', fontsize=16, fontname='Courier New')\n    plt.xlabel('Year', fontsize=14, fontname='Courier New')\n    plt.ylabel('Total Affected', fontsize=14, fontname='Courier New')\n\n    plt.xticks(rotation=45, fontsize=12, fontname='Courier New')\n    plt.yticks(fontsize=12, fontname='Courier New')\n\n    # Remove grid\n    plt.grid(False)\n    \n    # Add tooltips\n    cursor = mplcursors.cursor(line, hover=True)\n    cursor.connect(\n        \"add\", \n        lambda sel: sel.annotation.set_text(\n            f\"Year: {region_data.iloc[sel.index]['Year']}\\nAffected: {region_data.iloc[sel.index]['Total affected']}\"\n        )\n    )\n\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport altair as alt\nimport os\n\n# Ensure plots directory exists\nos.makedirs(\"../plots/total_affected\", exist_ok=True)\n\n# Clean and prepare data\ndf['Group'] = df['Group'].str.strip().str.replace('\\u00A0', ' ', regex=True)\ndf['Year'] = df['Year'].astype(str)\n\n# Group by Year and Group\nregion_year = df.groupby(['Year', 'Group'])['Total affected'].sum().reset_index()\n\n# Loop through each region (Group)\nfor region in region_year['Group'].unique():\n    region_data = region_year[region_year['Group'] == region].copy()\n    \n    # Get ticks every 3 years\n    tick_values = region_data['Year'].iloc[::3].tolist()\n\n    # Create line chart with red points\n    chart = (\n        alt.Chart(region_data).mark_line(color='red')\n        .encode(\n            x=alt.X('Year:N',\n                title='Year',\n                axis=alt.Axis(\n                    values=tick_values,\n                    labelAngle=0,\n                    labelFont='Courier New',\n                    labelFontSize=14\n                )\n            ),\n            y=alt.Y('Total affected:Q',\n                title='Total Affected',\n                axis=alt.Axis(\n                    grid=False,\n                    labelFont='Courier New',\n                    labelFontSize=14\n                )\n            ),\n            tooltip=['Year:N', 'Total affected:Q']\n        )\n        + alt.Chart(region_data).mark_point(color='red', filled=True, size=80)\n        .encode(\n            x='Year:N',\n            y='Total affected:Q',\n            tooltip=['Year:N', 'Total affected:Q']\n        )\n    ).properties(\n        title=f'{region}: Total Aid Workers Affected Over Time',\n        width=700,\n        height=400\n    ).interactive().configure_view(\n        stroke=None\n    ).configure_title(\n        font='Courier New',\n        fontSize=18\n    ).configure_axis(\n        titleFont='Courier New',\n        titleFontSize=16\n    )\n\n    # Save chart\n    file_name = region.lower().replace(\" \", \"_\") + \"_total_affected.html\"\n    chart.save(f\"../plots/total_affected/{file_name}\")\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\nReferences\n\nAid Worker Security Database. 2024. “About the Aid Worker Security Database.” https://www.aidworkersecurity.org/about.\n\n\nBBC News. 2018. “Somalia Profile - Timeline.” https://www.bbc.com/news/world-africa-14094632.\n\n\nConcern Worldwide. 2022. “Timeline: South Sudan’s History at a Glance.” https://concernusa.org/news/timeline-south-sudan-history/.\n\n\nCouncil on Foreign Relations. n.d. “Timeline: The Iraq War.” https://www.cfr.org/timeline/iraq-war.\n\n\n———. 2021. “The u.s. War in Afghanistan.” https://www.cfr.org/timeline/us-war-afghanistan.\n\n\nGeorge W. Bush Presidential Library. n.d. “The Iraq War.” https://www.georgewbushlibrary.gov/research/topic-guides/the-iraq-war.\n\n\nMoulton, Madison. 2021. “Africa’s World War: The Congo War.” https://historyguild.org/africas-world-war-the-congo-war/.\n\n\nNorwegian Refugee Council. 2015. “10 Challenges to Humanitarian Action.” https://www.nrc.no/perspectives/2015/nr-3/10-challanges.\n\n\nODI. 2010. Good Practice Review: Operational Security Management in Violent Environments. London: Humanitarian Practice Network."
  },
  {
    "objectID": "code/data_cleaning.html",
    "href": "code/data_cleaning.html",
    "title": "Conflict and Compassion",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\n# Load the dataset\ndf = pd.read_csv(\"../data/raw/security_incidents.csv\")\n\n\ndf.head()\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nDay\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\n...\nAttack context\nLocation\nLatitude\nLongitude\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\n\n\n\n\n0\n1\n1997\n1.0\nNaN\nKH\nCambodia\nBanteay Meanchey\nNaN\nNaN\n0\n...\nUnknown\nUnknown\n14.070929\n103.099916\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\n\n\n1\n2\n1997\n1.0\nNaN\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n...\nRaid\nOffice/compound\n-1.499840\n29.634970\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\n\n\n2\n3\n1997\n2.0\nNaN\nTJ\nTajikistan\nNaN\nNaN\nNaN\n4\n...\nUnknown\nUnknown\n38.628173\n70.815654\nNaN\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Niger...\nArchived\nArchived\n\n\n3\n4\n1997\n2.0\nNaN\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n...\nUnknown\nUnknown\n-0.358216\n42.545087\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittiha...\nArchived\nArchived\n\n\n4\n5\n1997\n2.0\n14.0\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n...\nIndividual attack\nUnknown\n-1.950851\n30.061508\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\n\n\n\n\n5 rows × 41 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4337 entries, 0 to 4336\nData columns (total 41 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Incident ID               4337 non-null   int64  \n 1   Year                      4337 non-null   int64  \n 2   Month                     4289 non-null   float64\n 3   Day                       3957 non-null   float64\n 4   Country Code              4304 non-null   object \n 5   Country                   4332 non-null   object \n 6   Region                    3970 non-null   object \n 7   District                  3601 non-null   object \n 8   City                      3349 non-null   object \n 9   UN                        4337 non-null   int64  \n 10  INGO                      4337 non-null   int64  \n 11  ICRC                      4328 non-null   float64\n 12  NRCS and IFRC             4328 non-null   float64\n 13  NNGO                      4328 non-null   float64\n 14  Other                     4337 non-null   int64  \n 15  Nationals killed          4337 non-null   int64  \n 16  Nationals wounded         4337 non-null   int64  \n 17  Nationals kidnapped       4337 non-null   int64  \n 18  Total nationals           4337 non-null   int64  \n 19  Internationals killed     4337 non-null   int64  \n 20  Internationals wounded    4337 non-null   int64  \n 21  Internationals kidnapped  4337 non-null   int64  \n 22  Total internationals      4337 non-null   int64  \n 23  Total killed              4337 non-null   int64  \n 24  Total wounded             4337 non-null   int64  \n 25  Total kidnapped           4337 non-null   int64  \n 26  Total affected            4337 non-null   int64  \n 27  Gender Male               4337 non-null   int64  \n 28  Gender Female             4337 non-null   int64  \n 29  Gender Unknown            4337 non-null   int64  \n 30  Means of attack           4337 non-null   object \n 31  Attack context            4337 non-null   object \n 32  Location                  4337 non-null   object \n 33  Latitude                  4324 non-null   float64\n 34  Longitude                 4324 non-null   float64\n 35  Motive                    4333 non-null   object \n 36  Actor type                4337 non-null   object \n 37  Actor name                4329 non-null   object \n 38  Details                   4337 non-null   object \n 39  Verified                  4336 non-null   object \n 40  Source                    4337 non-null   object \ndtypes: float64(7), int64(20), object(14)\nmemory usage: 1.4+ MB\n\n\n\ndf.shape\n\n(4337, 41)\n\n\n\n# count missing values in each column\nmissing_counts = df.isnull().sum()\n\n# dispplay columns with missing values only\nmissing_counts[missing_counts &gt; 0].sort_values(ascending=False)\n\nCity             988\nDistrict         736\nDay              380\nRegion           367\nMonth             48\nCountry Code      33\nLatitude          13\nLongitude         13\nICRC               9\nNRCS and IFRC      9\nNNGO               9\nActor name         8\nCountry            5\nMotive             4\nVerified           1\ndtype: int64\n\n\n\n# Fill categorical columns with 'Unknown'\nfill_unknown_cols = ['City', 'District', 'Region', 'Country', 'Country Code', 'Actor name', 'Motive', 'Verified']\ndf[fill_unknown_cols] = df[fill_unknown_cols].fillna('Unknown')\n\n# Fill Month/Day with neutral placeholders\ndf['Month'] = df['Month'].fillna(6).astype(int)\ndf['Day'] = df['Day'].fillna(15).astype(int)\n\n# Fill 0/1 org involvement flags with 0\nfor org_col in ['ICRC', 'NRCS and IFRC', 'NNGO']:\n    df[org_col] = df[org_col].fillna(0).astype(int)\n\n# Drop rows with missing coordinates\ndf = df.dropna(subset=['Latitude', 'Longitude'])\n\n\n\ndf.shape\n\n(4324, 41)\n\n\n\ndf.dtypes\n\nIncident ID                   int64\nYear                          int64\nMonth                         int64\nDay                           int64\nCountry Code                 object\nCountry                      object\nRegion                       object\nDistrict                     object\nCity                         object\nUN                            int64\nINGO                          int64\nICRC                          int64\nNRCS and IFRC                 int64\nNNGO                          int64\nOther                         int64\nNationals killed              int64\nNationals wounded             int64\nNationals kidnapped           int64\nTotal nationals               int64\nInternationals killed         int64\nInternationals wounded        int64\nInternationals kidnapped      int64\nTotal internationals          int64\nTotal killed                  int64\nTotal wounded                 int64\nTotal kidnapped               int64\nTotal affected                int64\nGender Male                   int64\nGender Female                 int64\nGender Unknown                int64\nMeans of attack              object\nAttack context               object\nLocation                     object\nLatitude                    float64\nLongitude                   float64\nMotive                       object\nActor type                   object\nActor name                   object\nDetails                      object\nVerified                     object\nSource                       object\ndtype: object\n\n\n\ndf.drop(columns=['Day'], inplace=True)\n\n\ndf.shape\n\n(4324, 40)\n\n\n\ndf.drop(columns=['Latitude', 'Longitude'], inplace=True)\n\n\nprint(df['Means of attack'].unique())\n\n['Unknown' 'Shooting' 'Kidnapping' 'Kidnap-killing' 'Aerial bombardment'\n 'Landmine ' 'Shelling' 'Body-borne IED' 'Bodily assault' 'Roadside IED'\n 'Vehicle-born IED' 'Other Explosives' 'Rape/sexual assault '\n 'Complex attack']\n\n\n\nprint(df['Attack context'].unique())\n\n['Unknown' 'Raid' 'Individual attack' 'Combat/Crossfire' 'Ambush'\n 'Detention' 'Mob violence']\n\n\n\nprint(df['Motive'].unique())\n\n['Unknown' 'Political' 'Incidental' 'Economic' 'Disputed' 'Other']\n\n\n\nprint(df['Actor type'].unique())\n\n['Unknown' 'Non-state armed group: Regional'\n 'Non-state armed group: National' 'Non-state armed group: Unknown'\n 'Staff member' 'Non-state armed group: Subnational' 'Unaffiliated'\n 'State: unknown' 'Police or paramilitary' 'Host state' 'Aid recipient'\n 'Non-state armed group: Global' 'Criminal' 'Foreign or coalition forces'\n 'Host State' 'Non-state armed group: Global ']\n\n\n\nprint(df['Actor name'].unique())\n\n['Unknown' 'Al-Itihaad al-Islamiya'\n 'Alliance of Democratic Forces for the Liberation of Congo-Zaire (ADFL)'\n 'Not applicable' 'Security guard' 'Clan'\n 'Armed Forces Revolutionary Council (AFRC)'\n 'Uganda National Rescue Front' 'Taliban' 'Armed tribesmen' 'Interahamwe'\n 'Militia' 'National Union for the Total Independence of Angola'\n 'Osman Atto Militia' 'Mobile Brigade Corps (Brimod)'\n 'Indonesian National Police' 'Sudan Liberation Movement/Army (SLA/AW)'\n 'Provincial Organization of Volunteers of Civil Defence of Angola (OPVDCA)'\n 'Mai Mai Militia' 'Muse Sudi & Omar Finish militia groups'\n \"Lord's Resistance Army (LRA)\" 'Al-Qaeda'\n \"Sudan People's Liberation Army (SPLA)\" 'Israel Defense Forces (IDF)'\n 'Ninja militia'\n 'Liberians United for Reconciliation and Democracy (LURD)'\n 'Al-Ittihad al-Islami' 'Contractor' 'Congolese National Police'\n 'Jaysh al-Mahdi' 'Janjaweed' 'Maoist rebel group (name unknown)'\n 'Indonesian National Armed Forces' 'Youths'\n 'Revolutionary Armed Forces of Colombia'\n 'Armed Forces of the Democratic Republic of the Congo (FARDC)'\n 'National Liberation Army' 'Shilluk King police' 'Murle & Didinga'\n 'Sudan National Security Service' 'Lashkar-e-Qahhar (suspected)'\n 'Sudanese Armed Forces' 'Special Task Force' 'Sri Lanka Armed Forces'\n 'Liberation Tigers of Tamil Eelam' 'Security Forces' 'Pirates'\n 'Transitional Federal Government forces (TFG)' 'Haqqani Network'\n 'Local government actors' 'Al Shabaab'\n 'Alliance for the Re-liberation of Somalia (armed faction)'\n 'International Security Assistance Force (ISAF)' 'Chadian Armed Forces'\n 'National Congress for the Defence of the People' 'Bani Dhabian tribe'\n 'Abu Sayyaf' 'Balochistan Liberation United Front' 'Police'\n 'Falcons for the Liberation of Africa' 'Military Police'\n 'Ethiopian Defense Forces' 'Oromo clan' 'Mai Mai Yakutumba'\n 'Al-Qaeda (affiliated)' 'Ogaden National Liberation Front (ONLF)'\n 'Pashtun and Uzbek anti-government forces' 'Uknown' 'Afghan Armed Forces'\n 'Murle Tribesman' 'Boko Haram' 'Mayi-Mayi Cheka' 'Conseil des R'\n 'Nuer clan' 'Democratic Forces for the Liberation of Rwanda (FDLR)'\n 'Spouse' 'Afghan National Police (ANP)' 'Abide Marabou tribe'\n 'Ansar al-Sharia' 'Yemeni Armed Forces'\n 'Somaliland Rapid Response Unit (RRU)' 'Refugees' 'Islamic State (IS)'\n 'Al-Marakisha tribe' 'Somali Armed Forces'\n 'District Shadow Governor (DSG)' 'International Military Forces (IMF)'\n 'Al-Nusra Front' 'National Security Personnel' 'Shareea Court' 'Seleka'\n 'Community members' 'Moro National Liberation Front (MNLF)'\n 'Tehrik-i-Taliban Pakistan (TTP)' 'Ex-Seleka' 'Afghan Local Police'\n 'Internally Displaced People (IDPs)'\n 'The Movement for Oneness and Jihad in West Africa (MUJAO)' 'Anti-Balaka'\n 'Mabanese Defense Forces' \"Donetsk People's Republic\"\n 'Pro-SPLA Shiluk militia' 'Dir Clan' 'Syrian Armed Forces'\n 'Kokang rebels' 'Al-Murabitoun' 'Russian Syrian Military Coalition'\n 'Family member' 'United States Armed Forces' 'Ex-employee'\n 'Ansar al-Islam' \"Sudan People's Liberation Army-in-Opposition (SPLA-IO)\"\n 'South Sudan Defence Forces (SSDF)' 'Saudi-led Coalition (SLC)'\n 'Houti Forces' 'Nigerian Armed Forces' 'Airport security'\n 'Kachin Independence Army (KIA)'\n 'Popular Front for the Central African Renaissance'\n 'Mouvement Patriotique pour la Centrafrique / Front Populaire pour la Renaissance de Centrafrique (MPC/FPRC)'\n 'Front Populaire pour la Renaissance de Centrafrique (FPRC)'\n 'Administration Police (AP)' 'Misseriya'\n 'South Sudan National Police Service' 'Hayat Tahrir al-Sham (HTS)'\n 'Military' 'Group to Support Islam and Muslims (GSIM)' 'MS-13'\n 'Tuareg tribe' 'Union for Peace in the Central African Republic (UPC)'\n 'Bandits '\n 'The Popular Front for the Rebirth of Central African Republic (FPRC)'\n 'Ebola victim families ' 'Day labourer' 'DR Congo Armed Forces'\n 'Security guards' 'Anti-Balaka ' 'Afghan National Security Forces'\n 'Islamic State in West Africa (ISWA)' 'Myanmar Armed Forces'\n 'Spouse/National Security Services (NSS)' 'Northern Alliance'\n 'Ethiopian Armed Forces' 'Fulani' 'SPLA/M-IO' 'Turkish Armed Forces'\n 'The Islamic Emirate of Afghanistan'\n 'Unite pour la paix en Centrafrique (UPC)' 'National Salvation Front'\n 'Turkish Armed Forces and Free Syrian Army'\n 'National Council of Abs District Officer' 'Isreali Defence Forces (IDF)'\n 'You le Geant' 'Civilians' 'Toronto Boys' 'Unknown '\n 'Guardians of Religion Organisation' 'Armed Opposition'\n 'Karamojong Militia' 'Malian Armed Forces (FAMA)'\n \"Kurdistan Workers' Party (PKK)\" 'Fulanis tribe'\n 'Islamic State of West Africa Province' 'JNIM Militia'\n 'Amazonia seperatists' 'Arab Tribesmen' 'Islamic State'\n 'Dan Na Ambassagou Militia' 'US Coalition' 'Tribes'\n 'Mayi-Mayi Biloze Bishambuke' 'Syrian Democratic Forces (SDF)'\n 'Taxi driver'\n \"Sudan People's Liberation Army-in-Opposition (SPLA-IO) affiliated youth\"\n 'Tribesmen' 'Marehan-Wagardhac militia'\n 'Coalition des Patriotes pour le  Changement/Mouvement Patriotique pour la Centrafrique (CPC/MPC)'\n 'Joint Force' 'Criminal' 'Cameroon Armed Forces' 'Civilian'\n 'Twigwaneho Militia' 'Mai Mai Buhirwa Militia' 'Malual Mouk Clan'\n 'Monyumiji Youth' \"People's Defense Force (PDF)\"\n 'Ambazonian Defense Forces (ADF)' 'Central African Armed Forces (FACA)'\n 'Herders' \"People's Militia Force\" 'Kurdish Self-management forces'\n 'Pyu Saw Htee militia' 'Retour, Reclamation et Rehabilitation (3R)'\n 'Junta Forces' '400 Mawozo' 'Hawadle Clan militia' 'Israeli Settlers'\n 'Dawlatoun' 'Labour Union' 'Unknwon' 'Russian Armed Forces'\n 'Commercial motorcyclists' 'Union Parishad' 'Islamic Republic of Iran'\n 'Beneficiary' 'Rizeigat Militia' 'Kuluna gang' 'Haitian National Police'\n 'Unite pour la Paix en Centrafique (UPC)' 'Youth' 'Unkown' 'Girlfriend'\n 'Prison services' 'Body guard of administrative authority'\n 'Kachin Independence Army' 'Kitgwang Militia' 'Al Fasher Militia'\n 'Allied Democratic Forces (ADF)'\n 'Chieng Kuol and Chieng Yaar communities '\n \"Uganda People's Defence Force\" 'Tigray People’s Liberation Front (TPLF)'\n 'Saraya Ahl al-Khaf' 'Oromo Liberation Army (OLA)'\n 'Islamic State (affiliated)' 'Boko Karam'\n 'Islamic State in the Greater Sahara' 'Bandits'\n \"Sudan People's Liberation Movement-North\" 'Dinka Bor'\n 'Lango age-set group' 'Agaar Dinka community members'\n 'Husband of aid receipient' 'Rapid Support Forces (RSF)' 'CODECO'\n 'PMC Wagner' 'Sudan Rapid Support Forces (RSF)' 'Aid recipient' 'Workers'\n 'Community member' 'One Heart gang' 'Jund al-Sham' 'Dhulbahante clan'\n 'Dulmi-diid clan militia' \"Tariq Saleh's forces\"\n 'Local Agar Dinka members' 'Dawei Defense Team (PaKaPha)' 'Unaffiliated'\n 'March 23 Movement (M23)' 'Local resistance forces' 'Hamas' 'Luo youth'\n 'Israeli Defence Forces (IDF)' 'Spouse of a beneficiary'\n 'Rek Dinka and the Marial Bai/Wun Bai community' 'Ex-wife'\n 'UN national staff' 'Not aplicable' 'Zamfara Militia'\n 'Rapid Support Forces' 'IDP' 'Homeless person' 'Colleague' 'IDPs'\n 'Southern Transitional Council (STC)' 'QSD militia' 'Non applicable'\n 'Fellow staff member' 'Myanmar National Democratic Alliance Army (MNDAA)'\n 'Armed demonstrators' 'Protesters' 'Houthi Forces' 'Criminals' 'Wagner'\n 'Digil-Jiido clan militia' 'Burkina Faso Armed Forces' 'EIS affiliated'\n 'Israel Defense Forces' 'Sudan Joint Forces' 'Haitian Police']\n\n\n\ndf.shape\n\n(4324, 38)\n\n\n\ndf.to_csv(\"../data/processed/security_incidents_clean.csv\", index=False)\n\n\n# Define the mapping\nactor_group_map = {\n    'Non-state armed group: Regional': 'Non-state Armed Group',\n    'Non-state armed group: National': 'Non-state Armed Group',\n    'Non-state armed group: Unknown': 'Non-state Armed Group',\n    'Non-state armed group: Subnational': 'Non-state Armed Group',\n    'Non-state armed group: Global': 'Non-state Armed Group',\n    'Non-state armed group: Global ': 'Non-state Armed Group',  # trailing space\n\n    'Host state': 'State Actor',\n    'Host State': 'State Actor',\n    'State: unknown': 'State Actor',\n    'Police or paramilitary': 'State Actor',\n    'Foreign or coalition forces': 'State Actor',\n\n    'Staff member': 'Individual',\n    'Unaffiliated': 'Individual',\n    'Aid recipient': 'Individual',\n\n    'Criminal': 'Criminal',\n    'Unknown': 'Unknown'\n}\n\n# Apply the mapping\ndf['ActorGroup'] = df['Actor type'].map(actor_group_map)\n\n\ndf.to_csv(\"../data/processed/security_incidents_clean.csv\", index=False)\n\n\ndf.head()\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\nINGO\n...\nMeans of attack\nAttack context\nLocation\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\nActorGroup\n\n\n\n\n0\n1\n1997\n1\nKH\nCambodia\nBanteay Meanchey\nUnknown\nUnknown\n0\n0\n...\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\nUnknown\n\n\n1\n2\n1997\n1\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n4\n...\nShooting\nRaid\nOffice/compound\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\nUnknown\n\n\n2\n3\n1997\n2\nTJ\nTajikistan\nUnknown\nUnknown\nUnknown\n4\n0\n...\nKidnapping\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Niger...\nArchived\nArchived\nUnknown\n\n\n3\n4\n1997\n2\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n1\n...\nUnknown\nUnknown\nUnknown\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittiha...\nArchived\nArchived\nNon-state Armed Group\n\n\n4\n5\n1997\n2\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n0\n...\nShooting\nIndividual attack\nUnknown\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\nUnknown\n\n\n\n\n5 rows × 39 columns\n\n\n\n\n\n\n\nReferences\n\nAid Worker Security Database. 2024. “About the Aid Worker Security Database.” https://www.aidworkersecurity.org/about.\n\n\nBBC News. 2018. “Somalia Profile - Timeline.” https://www.bbc.com/news/world-africa-14094632.\n\n\nConcern Worldwide. 2022. “Timeline: South Sudan’s History at a Glance.” https://concernusa.org/news/timeline-south-sudan-history/.\n\n\nCouncil on Foreign Relations. n.d. “Timeline: The Iraq War.” https://www.cfr.org/timeline/iraq-war.\n\n\n———. 2021. “The u.s. War in Afghanistan.” https://www.cfr.org/timeline/us-war-afghanistan.\n\n\nGeorge W. Bush Presidential Library. n.d. “The Iraq War.” https://www.georgewbushlibrary.gov/research/topic-guides/the-iraq-war.\n\n\nMoulton, Madison. 2021. “Africa’s World War: The Congo War.” https://historyguild.org/africas-world-war-the-congo-war/.\n\n\nNorwegian Refugee Council. 2015. “10 Challenges to Humanitarian Action.” https://www.nrc.no/perspectives/2015/nr-3/10-challanges.\n\n\nODI. 2010. Good Practice Review: Operational Security Management in Violent Environments. London: Humanitarian Practice Network."
  },
  {
    "objectID": "code/visualizations.html",
    "href": "code/visualizations.html",
    "title": "Total affected across the world",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport altair as alt\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport os\n\n\nsecurity_incidents_clean = pd.read_csv(\"../data/processed/security_incidents_clean.csv\")\n\n\nsecurity_incidents_clean.head(2)\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\nINGO\n...\nMeans of attack\nAttack context\nLocation\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\nGroup\n\n\n\n\n0\n1\n1997\n1\nKH\nCambodia\nBanteay Meanchey\nUnknown\nUnknown\n0\n0\n...\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\nAsia\n\n\n1\n2\n1997\n1\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n4\n...\nShooting\nRaid\nOffice/compound\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\nAfrica\n\n\n\n\n2 rows × 39 columns\n\n\n\n\n# Convert Year to string (Altair handles x-axis better this way)\nsecurity_incidents_clean['Year'] = security_incidents_clean['Year'].astype(str)\n\n# Group by year\nyearly = security_incidents_clean.groupby('Year')['Total affected'].sum().reset_index()\n\n# Get tick labels for every 3rd year\ntick_values = yearly['Year'][::3].tolist()\n\n# Line chart\nline = alt.Chart(yearly).mark_line(\n    color='red'\n).encode(\n    x=alt.X('Year:N', title='Year', axis=alt.Axis(values=tick_values, labelAngle=0, \n                labelFont='Courier New',\n                labelFontSize=14)),\n    y=alt.Y('Total affected:Q', title='Total Affected', axis=alt.Axis(grid=False, \n                labelFont='Courier New',\n                labelFontSize=14)),\n    tooltip=[\n        alt.Tooltip('Year:N'),\n        alt.Tooltip('Total affected:Q')\n    ]\n).properties(\n    title='Total Aid Workers Affected Over Time',\n    width=700,\n    height=400\n)\n\n# Red markers\npoints = alt.Chart(yearly).mark_point(\n    color='red',\n    filled=True,\n    size=80\n).encode(\n    x='Year:N',\n    y='Total affected:Q',\n    tooltip=[\n        alt.Tooltip('Year:N'),\n        alt.Tooltip('Total affected:Q')\n    ]\n)\n\nfinal_chart = (line + points).interactive().configure_axis(\n    titleFont='Courier New',\n    titleFontSize=16\n).configure_view(\n    stroke=None\n).configure_title(\n    font='Courier New',\n    fontSize=18\n)\nfinal_chart.save('../plots/total_affected_over_time.html')\nfinal_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\nGroup wise total affected\n\nsecurity_incidents_clean['Year'] = security_incidents_clean['Year'].astype(str)\n\n\n# Africa\nafrica = security_incidents_clean[security_incidents_clean['Group'] == 'Africa']\nafrica_grouped = africa.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = africa_grouped['Year'][::3].tolist()\n\nafrica_chart = (\n    alt.Chart(africa_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N',\n            axis=alt.Axis(\n                values=tick_values,\n                labelAngle=0,\n                labelFont='Courier New',\n                labelFontSize=14\n            ),\n            title='Year'\n        ),\n        y=alt.Y('Total affected:Q',\n            axis=alt.Axis(\n                grid=False,\n                labelFont='Courier New',\n                labelFontSize=14\n            ),\n            title='Total Affected'\n        ),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(\n        title='Africa: Total Aid Workers Affected Over Time',\n        width=700,\n        height=400\n    )\n    + alt.Chart(africa_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(\n        x='Year:N',\n        y='Total affected:Q',\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n).interactive().configure_view(\n    stroke=None\n).configure_title(\n    font='Courier New',\n    fontSize=18,\n    anchor='start'\n).configure_axis(\n    titleFont='Courier New',\n    titleFontSize=16\n).configure_title(\n    font='Courier New',\n    fontSize=18\n)\n\nafrica_chart.save(\"../plots/africa_total_affected.html\")\nafrica_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\n# Asia\nasia = security_incidents_clean[security_incidents_clean['Group'] == 'Asia']\nasia_grouped = asia.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = asia_grouped['Year'][::3].tolist()\n\nasia_chart = (\n    alt.Chart(asia_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0, labelFont='Courier New', labelFontSize=14), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False, labelFont='Courier New', labelFontSize=14), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='Asia: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(asia_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None\n).configure_title(\n    font='Courier New',\n    fontSize=18,\n    anchor='start'\n).configure_axis(\n    titleFont='Courier New',\n    titleFontSize=16\n).configure_title(\n    font='Courier New',\n    fontSize=18\n)\n\nasia_chart.save(\"../plots/asia_total_affected.html\")\nasia_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\nimport altair as alt\nimport os\n\n# Ensure plots directory exists\nos.makedirs(\"../plots\", exist_ok=True)\n\nsecurity_incidents_clean['Group'] = security_incidents_clean['Group'].str.strip().str.replace('\\u00A0', ' ', regex=True)\n\n\n# Convert Year to string for Altair axis\nsecurity_incidents_clean['Year'] = security_incidents_clean['Year'].astype(str)\n\n# Loop through each region (Group)\nfor group_name in security_incidents_clean['Group'].unique():\n    group_df = security_incidents_clean[security_incidents_clean['Group'] == group_name]\n    grouped = group_df.groupby('Year')['Total affected'].sum().reset_index()\n    tick_values = grouped['Year'][::3].tolist()\n\n    # Create the chart\n    chart = (\n        alt.Chart(grouped).mark_line(color='red')\n        .encode(\n            x=alt.X('Year:N',\n                title='Year',\n                axis=alt.Axis(\n                    values=tick_values,\n                    labelAngle=0,\n                    labelFont='Courier New',\n                    labelFontSize=14\n                )\n            ),\n            y=alt.Y('Total affected:Q',\n                title='Total Affected',\n                axis=alt.Axis(\n                    grid=False,\n                    labelFont='Courier New',\n                    labelFontSize=14\n                )\n            ),\n            tooltip=['Year:N', 'Total affected:Q']\n        )\n        .properties(\n            title=f'{group_name}: Total Aid Workers Affected Over Time',\n            width=700,\n            height=400\n        )\n        + alt.Chart(grouped).mark_point(color='red', filled=True, size=80)\n        .encode(\n            x='Year:N',\n            y='Total affected:Q',\n            tooltip=['Year:N', 'Total affected:Q']\n        )\n    ).interactive().configure_view(\n        stroke=None\n    ).configure_title(\n        font='Courier New',\n        fontSize=18\n    ).configure_axis(\n        titleFont='Courier New',\n        titleFontSize=16\n    )\n\n    # Clean file name (lowercase, no spaces)\n    file_name = group_name.lower().replace(\" \", \"_\") + \"_total_affected.html\"\n    chart.save(f\"../plots/{file_name}\")\n    chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n#\n\nme = security_incidents_clean[security_incidents_clean['Group'] == 'Middle East']\nme_grouped = me.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = me_grouped['Year'][::3].tolist()\n\nme_chart = (\n    alt.Chart(me_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='Middle East: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(me_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None)\nme_chart.save(\"../plots/middle_east_total_affected.html\")\nme_chart\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile ~/miniforge3/lib/python3.10/site-packages/pandas/core/indexes/base.py:3791, in Index.get_loc(self, key)\n   3790 try:\n-&gt; 3791     return self._engine.get_loc(casted_key)\n   3792 except KeyError as err:\n\nFile index.pyx:152, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:181, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7080, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7088, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'Group'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nCell In[274], line 2\n      1 #\n----&gt; 2 df['Group'] = df['Group'].str.strip()\n      4 me = security_incidents_clean[security_incidents_clean['Group'] == 'Middle East']\n      5 me_grouped = me.groupby('Year')['Total affected'].sum().reset_index()\n\nFile ~/miniforge3/lib/python3.10/site-packages/pandas/core/frame.py:3893, in DataFrame.__getitem__(self, key)\n   3891 if self.columns.nlevels &gt; 1:\n   3892     return self._getitem_multilevel(key)\n-&gt; 3893 indexer = self.columns.get_loc(key)\n   3894 if is_integer(indexer):\n   3895     indexer = [indexer]\n\nFile ~/miniforge3/lib/python3.10/site-packages/pandas/core/indexes/base.py:3798, in Index.get_loc(self, key)\n   3793     if isinstance(casted_key, slice) or (\n   3794         isinstance(casted_key, abc.Iterable)\n   3795         and any(isinstance(x, slice) for x in casted_key)\n   3796     ):\n   3797         raise InvalidIndexError(key)\n-&gt; 3798     raise KeyError(key) from err\n   3799 except TypeError:\n   3800     # If we have a listlike key, _check_indexing_error will raise\n   3801     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3802     #  the TypeError.\n   3803     self._check_indexing_error(key)\n\nKeyError: 'Group'\n\n\n\n\n# North America\namericas = security_incidents_clean[security_incidents_clean['Group'] == 'North America']\namericas_grouped = americas.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = americas_grouped['Year'][::3].tolist()\n\namericas_chart = (\n    alt.Chart(americas_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='North America: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(americas_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None)\n\namericas_chart.save(\"../plots/northamerica_total_affected.html\")\namericas_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\n# South America\namericas = security_incidents_clean[security_incidents_clean['Group'] == 'South America']\namericas_grouped = americas.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = americas_grouped['Year'][::3].tolist()\n\namericas_chart = (\n    alt.Chart(americas_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='South America: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(americas_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None)\n\namericas_chart.save(\"../plots/southamerica_total_affected.html\")\namericas_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\n# europe\neurope = security_incidents_clean[security_incidents_clean['Group'] == 'Europe']\neurope_grouped = europe.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = europe_grouped['Year'][::3].tolist()\n\neurope_chart = (\n    alt.Chart(europe_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='Europe: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(europe_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None)\neurope_chart.save(\"../plots/europe_total_affected.html\")\neurope_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning:\n\nthe convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n\n\n\n\n\n\n\n\n\n# Oceania\neurope = security_incidents_clean[security_incidents_clean['Group'] == 'Oceania']\neurope_grouped = europe.groupby('Year')['Total affected'].sum().reset_index()\ntick_values = europe_grouped['Year'][::3].tolist()\n\neurope_chart = (\n    alt.Chart(europe_grouped).mark_line(color='red')\n    .encode(\n        x=alt.X('Year:N', axis=alt.Axis(values=tick_values, labelAngle=0), title='Year'),\n        y=alt.Y('Total affected:Q', axis=alt.Axis(grid=False), title='Total Affected'),\n        tooltip=['Year:N', 'Total affected:Q']\n    )\n    .properties(title='Oceania: Total Aid Workers Affected Over Time', width=700, height=400)\n    + alt.Chart(europe_grouped).mark_point(color='red', filled=True, size=80)\n    .encode(x='Year:N', y='Total affected:Q', tooltip=['Year:N', 'Total affected:Q'])\n).interactive().configure_view(stroke=None)\neurope_chart.save(\"../plots/oceania_total_affected.html\")\neurope_chart\n\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n/Users/nandinikodali/miniforge3/lib/python3.10/site-packages/altair/utils/core.py:384: FutureWarning: the convert_dtype parameter is deprecated and will be removed in a future version.  Do ``ser.astype(object).apply()`` instead if you want ``convert_dtype=False``.\n  col = df[col_name].apply(to_list_if_array, convert_dtype=False)\n\n\n\n\n\n\n\n\n\nWorld map with total affected\n\nfrom pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2\nimport pandas as pd\n\n# Function to get country code and continent\ndef get_continent(col):\n    try:\n        cn_a2_code = country_name_to_country_alpha2(col)\n        cn_continent = country_alpha2_to_continent_code(cn_a2_code)\n        return pd.Series([cn_a2_code, cn_continent])\n    except:\n        return pd.Series([None, None])\n\n\nimport pandas as pd\nimport plotly.express as px\n\ndf = pd.read_csv(\"../data/processed/security_incidents_clean.csv\")\n\n# Convert Year to string for animation\ndf['Year'] = df['Year'].astype(str)\n\n# Summarize total affected per Country-Year\nbubble_data = df.groupby(['Country', 'Year'], as_index=False)['Total affected'].sum()\n\n# Rename for simplicity\nbubble_data = bubble_data.rename(columns={'Total affected': 'TotalAffected'})\n\n# Create the animated bubble map\nfig = px.scatter_geo(\n    bubble_data,\n    locations='Country',\n    locationmode='country names',  \n    size='TotalAffected',\n    color_discrete_sequence=['red'],\n    opacity=0.5,\n    animation_frame='Year',\n    projection='natural earth',\n    size_max=50,\n    hover_name='Country',\n    hover_data={'Year': True, 'TotalAffected': True}\n)\n\n# Define conflict annotations (start and end years, with text)\nconflict_annotations = [\n    {\"start\": 1998, \"end\": 1999, \"text\": \"Second Congo War\"},\n    {\"start\": 2001, \"end\": 2002, \"text\": \"Invasion of Afghanistan\"},\n    {\"start\": 2003, \"end\": 2004, \"text\": \"Invasion of Iraq\"},\n    {\"start\": 2013, \"end\": 2014, \"text\": \"South Sudanese Civil War\"},\n    {\"start\": 2022, \"end\": 2023, \"text\": \"Invasion of Ukraine\"}\n]\n\n# Add annotations to each existing auto-generated frame\nfor frame in fig.frames:\n    year = int(frame.name)\n    annotations = []\n    for conflict in conflict_annotations:\n        if conflict[\"start\"] &lt;= year &lt;= conflict[\"end\"]:\n            annotations.append(dict(\n                text=conflict[\"text\"],\n                x=0.5,\n                y=0.95,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(family=\"Courier New, monospace\", size=16, color=\"black\"),\n                bgcolor=\"rgba(255, 255, 255, 0.7)\",\n                bordercolor=\"black\",\n                borderwidth=1\n            ))\n    frame.layout.annotations = annotations\n\n# Style layout\nfig.update_layout(\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='natural earth'\n    ),\n    margin=dict(l=0, r=0, t=100, b=0),  \n    updatemenus=[{\n        \"buttons\": [\n            {\n                \"args\": [None, {\n                    \"frame\": {\"duration\": 1000, \"redraw\": True},\n                    \"fromcurrent\": True,\n                    \"transition\": {\"duration\": 500, \"easing\": \"linear\"},\n                    \"loop\": True\n                }],\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\n                    \"frame\": {\"duration\": 0, \"redraw\": False},\n                    \"mode\": \"immediate\",\n                    \"transition\": {\"duration\": 0}\n                }],\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": False,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0.3,\n        \"yanchor\": \"top\"\n    }],\n    sliders=[{\n        \"active\": 0,\n        \"x\": 0.3,\n        \"len\": 0.4,\n        \"xanchor\": \"left\",\n        \"yanchor\": \"top\",\n        \"y\": 0.22,\n        \"pad\": {\"b\": 1},\n        \"transition\": {\"duration\": 500, \"easing\": \"linear\"},\n        \"currentvalue\": {\"visible\": False},\n        \"steps\": [\n            {\n                \"args\": [[str(year)], {\n                    \"frame\": {\"duration\": 0, \"redraw\": True},\n                    \"mode\": \"immediate\",\n                    \"transition\": {\"duration\": 2}\n                }],\n                \"label\": str(year),\n                \"method\": \"animate\"\n            }\n            for year in sorted(df['Year'].unique())\n        ]\n    }]\n)\n\n# Save and show\nfig.write_html(\"../plots/worldmap_totalaffected.html\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nfrom plotly.graph_objs import Frame\n\n# Define conflicts with start & end years (inclusive)\nconflict_annotations = [\n    {\"start\": 1998, \"end\": 1999, \"text\": \"Second Congo War\"},\n    {\"start\": 2001, \"end\": 2002, \"text\": \"Invasion of Afghanistan\"},\n    {\"start\": 2003, \"end\": 2011, \"text\": \"Invasion of Iraq\"},\n    {\"start\": 2013, \"end\": 2014, \"text\": \"Outbreak of South Sudanese Civil War\"},\n    {\"start\": 2022, \"end\": 2023, \"text\": \"Invasion of Ukrain\"}\n]\n\n# Generate frames with annotations for each year\nframes = []\nfor year in sorted(df['Year'].unique()):\n    annotations = []\n    for conflict in conflict_annotations:\n        if conflict[\"start\"] &lt;= int(year) &lt;= conflict[\"end\"]:\n            annotations.append(dict(\n                text=conflict[\"text\"],\n                x=0.5,\n                y=1.08,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(size=16, color=\"black\"),\n                bgcolor=\"rgba(255, 255, 255, 0.7)\",\n                bordercolor=\"black\",\n                borderwidth=1\n            ))\n\n    frames.append(Frame(name=str(year), layout={\"annotations\": annotations}))\n\n# Assign frames to the figure\nfig.frames = frames\n\nfig.write_html(\"../plots/worldmap_totalaffected.html\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nAgencies being attacked\n\n# Step 1: Aggregate counts per year per agency\nagg_df = long_df.groupby(['Year', 'AgencyType'], as_index=False)['Count'].sum()\n\n# Step 2: Calculate cumulative totals\nagg_df.sort_values(by=['AgencyType', 'Year'], inplace=True)\nagg_df['Cumulative'] = agg_df.groupby('AgencyType')['Count'].cumsum()\n\n# Step 3: Rank by cumulative within each year\nagg_df['Rank'] = agg_df.groupby('Year')['Cumulative'].rank(method='min', ascending=False)\n\n# Optional: convert Year to string for plotting x-axis\nagg_df['Year'] = agg_df['Year'].astype(str)\n\n# Preview clean data\nagg_df.head()\n\n\n\n\n\n\n\n\nYear\nAgencyType\nCount\nCumulative\nRank\n\n\n\n\n0\n1997\nICRC\n7\n7\n4.0\n\n\n6\n1998\nICRC\n20\n27\n3.0\n\n\n12\n1999\nICRC\n5\n32\n3.0\n\n\n18\n2000\nICRC\n5\n37\n3.0\n\n\n24\n2001\nICRC\n7\n44\n3.0\n\n\n\n\n\n\n\n\nfig = go.Figure()\n\n\nfor agency in agg_df['AgencyType'].unique():\n    df_agency = agg_df[agg_df['AgencyType'] == agency]\n    \n    fig.add_trace(go.Scatter(\n        x=df_agency['Year'],\n        y=df_agency['Rank'],\n        mode='lines+markers',\n        name=agency,\n        line=dict(width=2, shape='spline'),\n        marker=dict(size=6),\n        customdata=df_agency[['Cumulative']],\n        hovertemplate=\n            \"&lt;b&gt;%{text}&lt;/b&gt;&lt;br&gt;\" +\n            \"Year: %{x}&lt;br&gt;\" +\n            \"Rank: %{y}&lt;br&gt;\" +\n            \"Cumulative Affected: %{customdata[0]}&lt;extra&gt;&lt;/extra&gt;\",\n        text=[agency] * len(df_agency)\n    ))\n\nyear_ticks = sorted(agg_df['Year'].unique())[::3]\n\n\n\nfig.update_yaxes(autorange='reversed', title='Rank (1 = Most Affected)', dtick=1)\n\nfig.update_xaxes(\n    title='Year',\n    tickmode='array',\n    tickvals=year_ticks\n)\n\nfig.update_layout(\n    title_x=0.5,\n    plot_bgcolor='white',\n    paper_bgcolor='white',\n    margin=dict(l=40, r=40, t=60, b=40),\n    showlegend=True,\n    \n    font=dict(\n        family='Courier New, monospace',\n        size=14,\n        color='black'\n    )\n)\n\n\nfig.write_html(\"../plots/bumpchart_totalaffected_agency.html\")\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nAttack Context vs Agency Type\n\n# Define agency columns\nagency_cols = ['UN', 'INGO', 'ICRC', 'NRCS and IFRC', 'NNGO', 'Other']\n\n# Melt into long format to count affected agencies per actor type\nlong_df = df.melt(\n    id_vars=['Attack context'],\n    value_vars=agency_cols,\n    var_name='AgencyType',\n    value_name='Affected'\n)\n\n# Filter out zero or missing values\nlong_df = long_df[long_df['Affected'] &gt; 0]\n\nheatmap_df = (\n    long_df.groupby(['Attack context', 'AgencyType'])\n    .size()\n    .reset_index(name='Incidents')\n)\n\n\nfig = px.density_heatmap(\n    heatmap_df,\n    x='AgencyType',\n    y='Attack context',\n    z='Incidents',\n    color_continuous_scale=px.colors.sequential.Reds[:8],  # skips lightest reds\n    text_auto=True,\n)\n\n# Update layout with monospace font\nfig.update_layout(\n    xaxis_title='Agency Type',\n    yaxis_title='Attack context',\n    plot_bgcolor='white',\n    paper_bgcolor='white',\n    title_x=0.5,\n    margin=dict(l=40, r=40, t=60, b=40),\n    font=dict(\n        family='Courier New, monospace',\n        size=14,\n        color='black'\n    )\n)\n\n# Set monospace for text labels inside the heatmap cells\nfig.update_traces(\n    textfont=dict(\n        family='Courier New, monospace',\n        size=12,\n        color='black'\n    )\n)\n\n\nfig.write_html(\"../plots/heatmap_attackcontext_agency.html\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nprint(heatmap_df['Incidents'].describe())\n\ncount     40.000000\nmean     110.100000\nstd      144.969104\nmin        1.000000\n25%       10.750000\n50%       35.500000\n75%      173.500000\nmax      647.000000\nName: Incidents, dtype: float64\n\n\n\n\nActor Group and Total affected\nTotal Aid Workers Affected by Actor Group\n\ndf = pd.read_csv(\"../data/processed/security_incidents_clean.csv\")\n\n\ngrouped_impact = (\n    df.groupby('ActorGroup', as_index=False)['Total affected']\n    .sum()\n    .dropna()\n    .sort_values(by='Total affected', ascending=False)\n)\n\n\nimport plotly.express as px\n\nfig = px.pie(\n    grouped_impact,\n    values='Total affected',\n    names='ActorGroup',\n    color_discrete_sequence=px.colors.sequential.Reds[::-1]\n)\n\n# Customize pie slices and labels\nfig.update_traces(\n    textinfo='percent+label',\n    pull=[0.05]*len(grouped_impact)\n)\n\n# Layout: center title, remove legend, monospace font\nfig.update_layout(\n    title_x=0.5,\n    paper_bgcolor='white',\n    showlegend=False,\n    font=dict(\n        family='Courier New, monospace',\n        size=14,\n        color='black'\n    )\n)\n\nfig.write_html(\"../plots/piechart_actorgroups.html\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nAttack context by actor group\n\ncontext_df = df.dropna(subset=['Attack context', 'ActorGroup'])\n\n# Group by ActorGroup and Attack context\ngrouped_context = (\n    context_df.groupby(['ActorGroup', 'Attack context'])\n    .size()\n    .reset_index(name='Count')\n)\n\n\nimport os\nimport plotly.express as px\n\n# Ensure output folder exists\nos.makedirs(\"../plots/attack_contexts\", exist_ok=True)\n\nunique_groups = grouped_context['ActorGroup'].unique()\n\nfor group in unique_groups:\n    df_group = grouped_context[grouped_context['ActorGroup'] == group]\n\n    fig = px.bar(\n        df_group,\n        x='Attack context',\n        y='Count',\n        color='Attack context',\n        title=f'Attack Contexts for {group}',\n        labels={'Count': 'Number of Incidents'},\n        color_discrete_sequence=px.colors.sequential.Reds_r,\n        text='Count'  # ← annotate bar tops\n    )\n\n    fig.update_traces(\n    textposition='top',  # ← Try this\n    textfont=dict(family='Courier New, monospace', size=12)\n    )\n\n    fig.update_layout(\n        title_x=0.5,\n        showlegend=False,\n        plot_bgcolor='white',\n        paper_bgcolor='white',\n        font=dict(\n            family='Courier New, monospace',\n            size=14,\n            color='black'\n        ),\n        margin=dict(t=60, l=40, r=40, b=40),\n        yaxis=dict(\n            showticklabels=False,\n            showgrid=False,\n            title=None,\n            zeroline=False\n        ),\n        xaxis=dict(  \n        tickangle=45\n    ),\n    uniformtext_minsize=10,\n    uniformtext_mode='show'\n    )\n\n    # Clean file name\n    safe_group_name = group.replace(\" \", \"_\").replace(\":\", \"\").replace(\"/\", \"\")\n    fig.write_html(f\"../plots/attack_contexts/{safe_group_name}.html\")\n    fig.show()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[14], line 23\n     10 df_group = grouped_context[grouped_context['ActorGroup'] == group]\n     12 fig = px.bar(\n     13     df_group,\n     14     x='Attack context',\n   (...)\n     20     text='Count'  # ← annotate bar tops\n     21 )\n---&gt; 23 fig.update_traces(\n     24 textposition='top',  # ← Try this\n     25 textfont=dict(family='Courier New, monospace', size=12)\n     26 )\n     28 fig.update_layout(\n     29     title_x=0.5,\n     30     showlegend=False,\n   (...)\n     49 uniformtext_mode='show'\n     50 )\n     52 # Clean file name\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/graph_objs/_figure.py:757, in Figure.update_traces(self, patch, selector, row, col, secondary_y, overwrite, **kwargs)\n    694 def update_traces(\n    695     self,\n    696     patch=None,\n   (...)\n    702     **kwargs,\n    703 ) -&gt; \"Figure\":\n    704     \"\"\"\n    705 \n    706     Perform a property update operation on all traces that satisfy the\n   (...)\n    755 \n    756     \"\"\"\n--&gt; 757     return super(Figure, self).update_traces(\n    758         patch, selector, row, col, secondary_y, overwrite, **kwargs\n    759     )\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:1365, in BaseFigure.update_traces(self, patch, selector, row, col, secondary_y, overwrite, **kwargs)\n   1311 \"\"\"\n   1312 Perform a property update operation on all traces that satisfy the\n   1313 specified selection criteria\n   (...)\n   1360     Returns the Figure object that the method was called on\n   1361 \"\"\"\n   1362 for trace in self.select_traces(\n   1363     selector=selector, row=row, col=col, secondary_y=secondary_y\n   1364 ):\n-&gt; 1365     trace.update(patch, overwrite=overwrite, **kwargs)\n   1366 return self\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:5123, in BasePlotlyType.update(self, dict1, overwrite, **kwargs)\n   5121     with self.figure.batch_update():\n   5122         BaseFigure._perform_update(self, dict1, overwrite=overwrite)\n-&gt; 5123         BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\n   5124 else:\n   5125     BaseFigure._perform_update(self, dict1, overwrite=overwrite)\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:3926, in BaseFigure._perform_update(plotly_obj, update_obj, overwrite)\n   3923                 plotly_obj[key] = val\n   3924         else:\n   3925             # Assign non-compound value\n-&gt; 3926             plotly_obj[key] = val\n   3928 elif isinstance(plotly_obj, tuple):\n   3930     if len(update_obj) == 0:\n   3931         # Nothing to do\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:4860, in BasePlotlyType.__setitem__(self, prop, value)\n   4856         self._set_array_prop(prop, value)\n   4858     # ### Handle simple property ###\n   4859     else:\n-&gt; 4860         self._set_prop(prop, value)\n   4861 else:\n   4862     # Make sure properties dict is initialized\n   4863     self._init_props()\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:5204, in BasePlotlyType._set_prop(self, prop, val)\n   5202         return\n   5203     else:\n-&gt; 5204         raise err\n   5206 # val is None\n   5207 # -----------\n   5208 if val is None:\n   5209     # Check if we should send null update\n\nFile ~/miniforge3/lib/python3.10/site-packages/plotly/basedatatypes.py:5199, in BasePlotlyType._set_prop(self, prop, val)\n   5196 validator = self._get_validator(prop)\n   5198 try:\n-&gt; 5199     val = validator.validate_coerce(val)\n   5200 except ValueError as err:\n   5201     if self._skip_invalid:\n\nFile ~/miniforge3/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:620, in EnumeratedValidator.validate_coerce(self, v)\n    618     v = self.perform_replacemenet(v)\n    619     if not self.in_values(v):\n--&gt; 620         self.raise_invalid_val(v)\n    621 return v\n\nFile ~/miniforge3/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:299, in BaseValidator.raise_invalid_val(self, v, inds)\n    296             for i in inds:\n    297                 name += \"[\" + str(i) + \"]\"\n--&gt; 299         raise ValueError(\n    300             \"\"\"\n    301     Invalid value of type {typ} received for the '{name}' property of {pname}\n    302         Received value: {v}\n    303 \n    304 {valid_clr_desc}\"\"\".format(\n    305                 name=name,\n    306                 pname=self.parent_name,\n    307                 typ=type_str(v),\n    308                 v=repr(v),\n    309                 valid_clr_desc=self.description(),\n    310             )\n    311         )\n\nValueError: \n    Invalid value of type 'builtins.str' received for the 'textposition' property of bar\n        Received value: 'top'\n\n    The 'textposition' property is an enumeration that may be specified as:\n      - One of the following enumeration values:\n            ['inside', 'outside', 'auto', 'none']\n      - A tuple, list, or one-dimensional numpy array of the above\n\n\n\n\nimport plotly.express as px\n\nfig = px.bar(\n    grouped_context,\n    x='Attack context',\n    y='Count',\n    color='ActorGroup',\n    title='Attack Contexts by Actor Group',\n    labels={'Count': 'Number of Incidents'},\n    color_discrete_sequence=px.colors.sequential.Reds_r,\n    text_auto=True  # Optional: auto display values in the segments\n)\n\nfig.update_layout(\n    barmode='stack',  # ← Stacked bars\n    title_x=0.5,\n    plot_bgcolor='white',\n    paper_bgcolor='white',\n    font=dict(\n        family='Courier New, monospace',\n        size=14,\n        color='black'\n    ),\n    margin=dict(t=60, l=40, r=40, b=40)\n)\n\n# Optional: remove y-axis grid/ticks\nfig.update_yaxes(\n    showgrid=False,\n    ticks='outside',\n    tickfont=dict(family='Courier New, monospace', size=12)\n)\n\n# Optional: adjust x-axis label font\nfig.update_xaxes(\n    tickfont=dict(family='Courier New, monospace', size=12)\n)\n\n# Save and show\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nMost affected by country\n\ntop_countries = (\n    df.groupby('Country', as_index=False)['Total affected']\n    .sum()\n    .sort_values(by='Total affected', ascending=False)\n    .head(7)\n)\ntop_countries\n\n\n\n\n\n\n\n\nCountry\nTotal affected\n\n\n\n\n0\nAfghanistan\n1353\n\n\n76\nSouth Sudan\n890\n\n\n78\nSudan\n667\n\n\n80\nSyrian Arab Republic\n608\n\n\n74\nSomalia\n585\n\n\n64\nOccupied Palestinian Territories\n578\n\n\n21\nDR Congo\n448\n\n\n\n\n\n\n\n\nimport plotly.express as px\n\nfig = px.bar(\n    top_countries,\n    x='Total affected',\n    y='Country',\n    orientation='h',\n    text='Total affected',\n    color='Country',\n    color_discrete_sequence=px.colors.sequential.Reds_r\n)\n\nfig.update_layout(\n    title_x=0.5,\n    yaxis=dict(categoryorder='total ascending'),\n    plot_bgcolor='white',\n    paper_bgcolor='white',\n    showlegend=False,\n    font=dict(\n        family='Courier New, monospace',\n        size=14,\n        color='black'\n    ),\n    xaxis=dict(\n        showticklabels=False,  \n        showgrid=False        \n    )\n)\nfig.write_html(\"../plots/grp_context_top7/total_affected_7.html\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\ntop7 = (\n    df.groupby('Country', as_index=False)['Total affected']\n    .sum()\n    .sort_values(by='Total affected', ascending=False)\n    .head(7)['Country']\n    .tolist()\n)\n\n\n# Filter data to top 7 countries\nsubset = df[df['Country'].isin(top7)]\n\n# Drop missing actor or context\nsubset = subset.dropna(subset=['ActorGroup', 'Attack context'])\n\n# Group data\ngrouped = (\n    subset.groupby(['Country', 'ActorGroup', 'Attack context'])\n    .size()\n    .reset_index(name='Count')\n)\n\n\nfor country in top7:\n    data = grouped[grouped['Country'] == country]\n\n    fig = px.bar(\n        data,\n        x='ActorGroup',\n        y='Count',\n        color='Attack context',\n        barmode='group',\n        title=f'Actor Group vs Attack Context in {country}',\n        labels={'ActorGroup': 'Actor Group', 'Count': 'Number of Incidents'},\n        color_discrete_sequence=px.colors.sequential.Reds_r\n    )\n\n    fig.update_layout(\n        title_x=0.5,\n        plot_bgcolor='white',\n        paper_bgcolor='white',\n        margin=dict(t=60, l=40, r=40, b=40),\n        xaxis_tickangle=-30\n    )\n\n    fig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Pick one country, e.g., Afghanistan\ncountry = \"Afghanistan\"\n\n# Filter and drop nulls\nsankey_df = df[\n    (df['Country'] == country) &\n    (df['ActorGroup'].notna()) &\n    (df['Attack context'].notna())\n]\n\n# Group by ActorGroup and Attack context\ngrouped = (\n    sankey_df.groupby(['ActorGroup', 'Attack context'])\n    .size()\n    .reset_index(name='Count')\n)\n\n# Combine all unique labels (actor + context)\nall_labels = pd.unique(grouped['ActorGroup'].tolist() + grouped['Attack context'].tolist())\nlabel_to_index = {label: i for i, label in enumerate(all_labels)}\n\n# Create Sankey link structure\nsource = grouped['ActorGroup'].map(label_to_index)\ntarget = grouped['Attack context'].map(label_to_index)\nvalue  = grouped['Count']\n\n\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color=\"black\", width=0.5),\n        label=all_labels,\n        color=\"red\"\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value\n    )\n)])\n\nfig.update_layout(\n    title_text=f\"Actor Groups vs Attack Contexts in {country}\",\n    title_x=0.5,\n    font=dict(size=12),\n    height=600\n)\n\nfig.show()\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_12211/3983831610.py:19: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Normalize count values to [0, 1] for color scaling\nnormalized = (value - value.min()) / (value.max() - value.min())\n\n# Get the Reds_r color scale\ncolors = px.colors.sequential.Reds[2:]\n\n# Interpolate colors from the scale based on normalized values\ndef interpolate_color(val):\n    # Use index to pick from color scale\n    idx = int(val * (len(colors) - 1))\n    return colors[idx]\n\nlink_colors = [interpolate_color(v) for v in normalized]\n\n\n\ncountry = \"Afghanistan\"\n\n# Filter and drop nulls\nsankey_df = df[\n    (df['Country'] == country) &\n    (df['ActorGroup'].notna()) &\n    (df['Attack context'].notna())\n]\n\n# Group by ActorGroup and Attack context\ngrouped = (\n    sankey_df.groupby(['ActorGroup', 'Attack context'])\n    .size()\n    .reset_index(name='Count')\n)\n\n# Combine all unique labels (actor + context)\nall_labels = pd.unique(grouped['ActorGroup'].tolist() + grouped['Attack context'].tolist())\nlabel_to_index = {label: i for i, label in enumerate(all_labels)}\n\n# Create Sankey link structure\nsource = grouped['ActorGroup'].map(label_to_index)\ntarget = grouped['Attack context'].map(label_to_index)\nvalue  = grouped['Count']\n\n\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color=\"black\", width=0.5),\n        label=all_labels,\n        color=\"lightgray\"  # node color\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value,\n        color=link_colors  # 🎨 color based on value\n    )\n)])\n\nfig.update_layout(\n    title_text=f\"Actor Groups vs Attack Contexts in {country}\",\n    title_x=0.5,\n    font=dict(size=12),\n    height=600\n)\n\nfig.show()\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_12211/1418143702.py:34: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport os\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n# Make sure the folder exists\nos.makedirs(\"../plots/grp_context_top7\", exist_ok=True)\n\n# Define the top 7 countries\ntop_countries = [\n    \"Afghanistan\",\n    \"South Sudan\",\n    \"Sudan\",\n    \"Syrian Arab Republic\",\n    \"Somalia\",\n    \"Occupied Palestinian Territories\",\n    \"DR Congo\"\n]\n\nfor country in top_countries:\n    # Filter and drop nulls\n    sankey_df = df[\n        (df['Country'] == country) &\n        (df['ActorGroup'].notna()) &\n        (df['Attack context'].notna())\n    ].copy()\n\n    # Rename 'Unknown' values to clarify node meaning\n    sankey_df['ActorGroup_Sankey'] = sankey_df['ActorGroup'].replace({'Unknown': 'Unknown (Actor)'})\n    sankey_df['AttackContext_Sankey'] = sankey_df['Attack context'].replace({'Unknown': 'Unknown (Context)'})\n\n    # Group by ActorGroup and Attack context\n    grouped = (\n        sankey_df.groupby(['ActorGroup_Sankey', 'AttackContext_Sankey'])\n        .size()\n        .reset_index(name='Count')\n    )\n\n    # Skip if there's no data\n    if grouped.empty:\n        continue\n\n    # Create label-index mapping\n    all_labels = pd.unique(grouped['ActorGroup_Sankey'].tolist() + grouped['AttackContext_Sankey'].tolist())\n    label_to_index = {label: i for i, label in enumerate(all_labels)}\n\n    # Map source/target to indexes\n    source = grouped['ActorGroup_Sankey'].map(label_to_index)\n    target = grouped['AttackContext_Sankey'].map(label_to_index)\n    value = grouped['Count']\n\n    # Normalize for coloring\n    normalized = (value - value.min()) / (value.max() - value.min() + 1e-6)\n    reds = px.colors.sequential.Reds[2:8] \n    def interpolate_color(val):\n        idx = int(val * (len(reds) - 1))\n        return reds[idx]\n    link_colors = [interpolate_color(v) for v in normalized]\n\n    # Sankey diagram\n    fig = go.Figure(data=[go.Sankey(\n        node=dict(\n            pad=15,\n            thickness=20,\n            line=dict(color=\"black\", width=0.5),\n            label=all_labels,\n            color=\"lightgray\"\n        ),\n        link=dict(\n            source=source,\n            target=target,\n            value=value,\n            color=link_colors,\n            hovertemplate='%{source.label} → %{target.label}&lt;br&gt;Count: %{value}&lt;extra&gt;&lt;/extra&gt;'\n        )\n    )])\n\n    fig.update_layout(\n        title_text=f\"Actor Groups vs Attack Contexts\",\n        title_x=0.5,\n        font=dict(\n            family='Courier New, monospace', \n            size=14,\n            color='black'\n        ),\n        height=600,\n        paper_bgcolor='white',\n        plot_bgcolor='white'\n    )\n\n    # Save HTML\n    filename = f\"../plots/grp_context_top7/{country.replace(' ', '_')}.html\"\n    fig.write_html(filename)\n    fig.show()\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n/var/folders/gc/drvvdqb93dqg4y0zt5zljf5w0000gn/T/ipykernel_25192/2487350251.py:44: FutureWarning:\n\nunique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nos.makedirs(\"../plots/circlular_bar_charts\", exist_ok=True)\n\n# Top 7 countries\ntop_countries = [\n    \"Afghanistan\",\n    \"South Sudan\",\n    \"Sudan\",\n    \"Syrian Arab Republic\",\n    \"Somalia\",\n    \"Occupied Palestinian Territories\",\n    \"DR Congo\"\n]\n\n# Agency columns\nagency_cols = ['UN', 'INGO', 'ICRC', 'NRCS and IFRC', 'NNGO', 'Other']\n\n# Loop through each country\nfor country in top_countries:\n    # Filter & reshape\n    country_df = df[df['Country'] == country].copy()\n    long_df = country_df.melt(\n        id_vars=['Total affected'],\n        value_vars=agency_cols,\n        var_name='AgencyType',\n        value_name='Presence'\n    )\n    long_df = long_df[long_df['Presence'] &gt; 0]\n\n    # Aggregate\n    agg = long_df.groupby('AgencyType', as_index=False)['Total affected'].sum()\n    if agg.empty:\n        continue\n    agg['Percentage'] = (agg['Total affected'] / agg['Total affected'].sum()) * 100\n    agg = agg.sort_values('Percentage', ascending=True)\n\n    # Setup\n    N = len(agg)\n    radii = np.arange(1, N + 1)\n    theta = 2 * np.pi * agg['Percentage'] / 100\n    colors = cm.Reds(np.linspace(0.3, 1, N))  # Red gradient\n\n    # Plot\n    fig, ax = plt.subplots(figsize=(3,3), subplot_kw={'projection': 'polar'})\n    ax.set_facecolor(\"white\")\n    fig.patch.set_facecolor(\"white\")\n    ax.set_theta_zero_location('N')  # 12 o'clock\n    ax.set_theta_direction(1)        # Clockwise\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.grid(False)\n    ax.spines['polar'].set_visible(False)\n\n    # Draw radial bars\n    for i in range(N):\n        ax.barh(\n            y=radii[i],\n            width=theta.iloc[i],\n            left=0,\n            height=0.9,\n            color=colors[i],\n            edgecolor='white'\n        )\n\n    # Annotate labels on the right\n    for i in range(N):\n        label = f\"{agg['AgencyType'].iloc[i]} {agg['Percentage'].iloc[i]:.1f}%\"\n        ax.text(\n            x=np.radians(-1),  # Slightly to the right of 12 o'clock\n            y=radii[i],\n            s=label,\n            ha='left',\n            va='center',\n            fontsize=10,\n            fontname = 'Courier New',\n            fontweight='bold'\n        )\n\n    # Save as transparent PNG\n    filename = f\"../plots/circlular_bar_charts/{country.replace(' ', '_')}.png\"\n    plt.tight_layout()\n    plt.savefig(filename, dpi=200, transparent=True)\n    plt.close()\n\n\n\n\n\n\nReferences\n\nAid Worker Security Database. 2024. “About the Aid Worker Security Database.” https://www.aidworkersecurity.org/about.\n\n\nBBC News. 2018. “Somalia Profile - Timeline.” https://www.bbc.com/news/world-africa-14094632.\n\n\nConcern Worldwide. 2022. “Timeline: South Sudan’s History at a Glance.” https://concernusa.org/news/timeline-south-sudan-history/.\n\n\nCouncil on Foreign Relations. n.d. “Timeline: The Iraq War.” https://www.cfr.org/timeline/iraq-war.\n\n\n———. 2021. “The u.s. War in Afghanistan.” https://www.cfr.org/timeline/us-war-afghanistan.\n\n\nGeorge W. Bush Presidential Library. n.d. “The Iraq War.” https://www.georgewbushlibrary.gov/research/topic-guides/the-iraq-war.\n\n\nMoulton, Madison. 2021. “Africa’s World War: The Congo War.” https://historyguild.org/africas-world-war-the-congo-war/.\n\n\nNorwegian Refugee Council. 2015. “10 Challenges to Humanitarian Action.” https://www.nrc.no/perspectives/2015/nr-3/10-challanges.\n\n\nODI. 2010. Good Practice Review: Operational Security Management in Violent Environments. London: Humanitarian Practice Network."
  }
]